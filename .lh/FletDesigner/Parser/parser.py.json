{
    "sourceFile": "FletDesigner/Parser/parser.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 36,
            "patches": [
                {
                    "date": 1702479436767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702479445588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             designer_section_class.all_controls.update({\n                 ctrl: flet_cls\n             })\n-            designer_section_class.all_controls.update({\n+            designer_section_class.all_regions.update({\n                 ctrl: flet_cls\n             })\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n"
                },
                {
                    "date": 1702479505570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+from ..tools.create_new_file import create_new_file\n+import os, json, flet\n+\n+\n+class ParserEngine:\n+    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n+\n+    def __init__(self, file_path: str) -> None:\n+        # Project Information\n+        self.file_path: str = file_path\n+\n+        # Checking\n+        self.create_the_file()\n+\n+        # Experiance\n+        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n+        self.the_content = json.loads(self.file_content)\n+        self.__control_counter = int(\n+            self.the_content[\"page_props\"][\"control_counter_number\"]\n+        )\n+\n+    def create_the_file(self):\n+        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n+        if not os.path.isfile(self.file_path):\n+            create_new_file(file_path=self.file_path)\n+\n+    def load_content(self, designer_section_class):\n+        \"\"\"Load the content into the canvas (designer).\"\"\"\n+        # Add the controls to the 'self.all_controls' of the designer_section_class\n+        for ctrl in self.the_content[\"widgets\"]:\n+            properies = dict(self.the_content[\"widgets\"][ctrl])\n+            control_type_class = properies[\"control_type\"]\n+            del properies[\"control_type\"]\n+            flet_cls = flet.__dict__[control_type_class](**properies)            designer_section_class.all_controls.update({ctrl: flet_cls})\n+            designer_section_class.all_regions.update({ctrl: flet_cls})\n+            # designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.main_stack.controls.append(flet_cls)\n+\n+    def save_all(self):\n+        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n+        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n+            json.dumps(self.the_content, indent=4)\n+        )\n+\n+    def add_new_control_to_content(\n+        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n+    ):\n+        \"\"\"Add new control to content.\"\"\"\n+        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            \"control_type\"\n+        ] = control_class_name\n+        self.save_all()\n+\n+    def edit_control_property(\n+        self, control_uniqe_name: str, property_name: str, new_property_value\n+    ):\n+        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n+        if control_uniqe_name not in self.the_content[\"widgets\"]:\n+            raise Exception(\n+                f\"There is no existing control with name '{control_uniqe_name}'\"\n+            )\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            property_name\n+        ] = new_property_value\n+        self.save_all()\n+\n+    def delete_control_property(self, control_uniqe_name: str):\n+        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n+        del self.the_content[\"widgets\"][control_uniqe_name]\n+        self.save_all()\n+\n+    def get_new_control_counter_number(self) -> int:\n+        self.control_counter = self.control_counter + 1\n+        return self.control_counter\n+\n+    # Properties\n+    @property\n+    def is_content_empty(self):\n+        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n+        if self.the_content[\"widgets\"] == {}:\n+            return True\n+        return False\n+\n+    @property\n+    def control_counter(self):\n+        \"\"\"Returns the current control counter number\"\"\"\n+        return self.__control_counter\n+\n+    @control_counter.setter\n+    def control_counter(self, new_value: int):\n+        if not isinstance(new_value, int):\n+            raise ValueError(\n+                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n+            )\n+\n+        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n+            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n+        )\n+        self.__control_counter = new_value\n+        self.save_all()\n"
                },
                {
                    "date": 1702479511393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,11 @@\n         for ctrl in self.the_content[\"widgets\"]:\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n-            flet_cls = flet.__dict__[control_type_class](**properies)            designer_section_class.all_controls.update({ctrl: flet_cls})\n+            flet_cls = flet.__dict__[control_type_class](**properies)\n+            print(f)\n+            designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.all_regions.update({ctrl: flet_cls})\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n@@ -98,94 +100,4 @@\n             self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n         )\n         self.__control_counter = new_value\n         self.save_all()\n-from ..tools.create_new_file import create_new_file\n-import os, json, flet\n-\n-\n-\n-class ParserEngine:\n-    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n-    def __init__(self, file_path:str) -> None:\n-        # Project Information\n-        self.file_path : str = file_path\n-\n-        # Checking\n-        self.create_the_file()\n-\n-        # Experiance\n-        self.file_content : str = open(file_path, encoding=\"utf-8\").read()\n-        self.the_content = json.loads(self.file_content)\n-        self.__control_counter = int(self.the_content['page_props']['control_counter_number'])\n-        \n-\n-    def create_the_file (self):\n-        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n-        if not os.path.isfile(self.file_path):\n-            create_new_file(file_path=self.file_path)\n-\n-    def load_content (self, designer_section_class):\n-        \"\"\"Load the content into the canvas (designer).\"\"\"\n-        # Add the controls to the 'self.all_controls' of the designer_section_class\n-        for ctrl in self.the_content['widgets']:\n-            properies = dict(self.the_content['widgets'][ctrl])\n-            control_type_class = properies['control_type']\n-            del properies['control_type']\n-            flet_cls = flet.__dict__[control_type_class](**properies)\n-            designer_section_class.all_controls.update({\n-                ctrl: flet_cls\n-            })\n-            designer_section_class.all_regions.update({\n-                ctrl: flet_cls\n-            })\n-            # designer_section_class.main_stack.controls.append(flet_cls)\n-            designer_section_class.main_stack.controls.append(flet_cls)\n-\n-\n-    def save_all (self):\n-        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n-        open(self.file_path, \"w+\", encoding=\"utf-8\").write(json.dumps(self.the_content, indent=4))\n-\n-    def add_new_control_to_content (self, control_uniqe_name:str, control_dict:dict, control_class_name:str):\n-        \"\"\"Add new control to content.\"\"\"\n-        self.the_content['widgets'].update({control_uniqe_name: control_dict})\n-        self.the_content['widgets'][control_uniqe_name]['control_type'] = control_class_name\n-        self.save_all()\n-\n-    def edit_control_property (self, control_uniqe_name:str, property_name:str, new_property_value):\n-        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n-        if control_uniqe_name not in self.the_content['widgets']:\n-            raise Exception(f\"There is no existing control with name '{control_uniqe_name}'\")\n-        self.the_content['widgets'][control_uniqe_name][property_name] = new_property_value\n-        self.save_all()\n-\n-    def delete_control_property (self, control_uniqe_name:str):\n-        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n-        del self.the_content['widgets'][control_uniqe_name]\n-        self.save_all()\n-\n-    def get_new_control_counter_number (self) -> int:\n-        self.control_counter = self.control_counter + 1\n-        return self.control_counter\n-\n-    # Properties\n-    @property\n-    def is_content_empty (self):\n-        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n-        if self.the_content['widgets'] == {}:\n-            return True\n-        return False\n-    \n-    @property\n-    def control_counter (self):\n-        \"\"\"Returns the current control counter number\"\"\"\n-        return self.__control_counter\n-\n-    @control_counter.setter\n-    def control_counter(self, new_value:int):\n-        if not isinstance(new_value, int):\n-            raise ValueError(f\"control_counter accept value with type 'int' only, not {type(new_value)}\")\n-        \n-        self.the_content['page_props']['control_counter_number'] = self.the_content['page_props']['control_counter_number'] + 1\n-        self.__control_counter = new_value\n-        self.save_all()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1702480350207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(f)\n+            print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.all_regions.update({ctrl: flet_cls})\n+            designer_section_class.all_regions\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702480936075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.all_regions\n+            designer_section_class\n+            print(designer_section_class.all_regions)\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702480941869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class\n+            designer_section_class.selected=\n             print(designer_section_class.all_regions)\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702480946952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.selected=\n+            designer_section_class.selected = ctrl\n+            \n             print(designer_section_class.all_regions)\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702480960475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n             \n-            print(designer_section_class.all_regions)\n+            print(designer_section_class.all_regions\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702480968937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n-            \n-            print(designer_section_class.all_regions\n+            designer_section_class.all_regions.update\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702480974380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+from ..tools.create_new_file import create_new_file\n+import os, json, flet\n+\n+\n+class ParserEngine:\n+    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n+\n+    def __init__(self, file_path: str) -> None:\n+        # Project Information\n+        self.file_path: str = file_path\n+\n+        # Checking\n+        self.create_the_file()\n+\n+        # Experiance\n+        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n+        self.the_content = json.loads(self.file_content)\n+        self.__control_counter = int(\n+            self.the_content[\"page_props\"][\"control_counter_number\"]\n+        )\n+\n+    def create_the_file(self):\n+        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n+        if not os.path.isfile(self.file_path):\n+            create_new_file(file_path=self.file_path)\n+\n+    def load_content(self, designer_section_class):\n+        \"\"\"Load the content into the canvas (designer).\"\"\"\n+        # Add the controls to the 'self.all_controls' of the designer_section_class\n+        for ctrl in self.the_content[\"widgets\"]:\n+            properies = dict(self.the_content[\"widgets\"][ctrl])\n+            control_type_class = properies[\"control_type\"]\n+            del properies[\"control_type\"]\n+            flet_cls = flet.__dict__[control_type_class](**properies)\n+            print(ctrl)\n+            designer_section_class.all_controls.update({ctrl: flet_cls})\n+            designer_section_class.selected = ctrl\n+            designer_section_class.all_regions.update()\n+            # designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.main_stack.controls.append(flet_cls)\n+\n+    def save_all(self):\n+        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n+        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n+            json.dumps(self.the_content, indent=4)\n+        )\n+\n+    def add_new_control_to_content(\n+        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n+    ):\n+        \"\"\"Add new control to content.\"\"\"\n+        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            \"control_type\"\n+        ] = control_class_name\n+        self.save_all()\n+\n+    def edit_control_property(\n+        self, control_uniqe_name: str, property_name: str, new_property_value\n+    ):\n+        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n+        if control_uniqe_name not in self.the_content[\"widgets\"]:\n+            raise Exception(\n+                f\"There is no existing control with name '{control_uniqe_name}'\"\n+            )\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            property_name\n+        ] = new_property_value\n+        self.save_all()\n+\n+    def delete_control_property(self, control_uniqe_name: str):\n+        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n+        del self.the_content[\"widgets\"][control_uniqe_name]\n+        self.save_all()\n+\n+    def get_new_control_counter_number(self) -> int:\n+        self.control_counter = self.control_counter + 1\n+        return self.control_counter\n+\n+    # Properties\n+    @property\n+    def is_content_empty(self):\n+        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n+        if self.the_content[\"widgets\"] == {}:\n+            return True\n+        return False\n+\n+    @property\n+    def control_counter(self):\n+        \"\"\"Returns the current control counter number\"\"\"\n+        return self.__control_counter\n+\n+    @control_counter.setter\n+    def control_counter(self, new_value: int):\n+        if not isinstance(new_value, int):\n+            raise ValueError(\n+                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n+            )\n+\n+        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n+            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n+        )\n+        self.__control_counter = new_value\n+        self.save_all()\n"
                },
                {
                    "date": 1702480987173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n         if not os.path.isfile(self.file_path):\n             create_new_file(file_path=self.file_path)\n \n+\n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n@@ -101,108 +102,4 @@\n             self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n         )\n         self.__control_counter = new_value\n         self.save_all()\n-from ..tools.create_new_file import create_new_file\n-import os, json, flet\n-\n-\n-class ParserEngine:\n-    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n-\n-    def __init__(self, file_path: str) -> None:\n-        # Project Information\n-        self.file_path: str = file_path\n-\n-        # Checking\n-        self.create_the_file()\n-\n-        # Experiance\n-        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n-        self.the_content = json.loads(self.file_content)\n-        self.__control_counter = int(\n-            self.the_content[\"page_props\"][\"control_counter_number\"]\n-        )\n-\n-    def create_the_file(self):\n-        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n-        if not os.path.isfile(self.file_path):\n-            create_new_file(file_path=self.file_path)\n-\n-    def load_content(self, designer_section_class):\n-        \"\"\"Load the content into the canvas (designer).\"\"\"\n-        # Add the controls to the 'self.all_controls' of the designer_section_class\n-        for ctrl in self.the_content[\"widgets\"]:\n-            properies = dict(self.the_content[\"widgets\"][ctrl])\n-            control_type_class = properies[\"control_type\"]\n-            del properies[\"control_type\"]\n-            flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(ctrl)\n-            designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.selected = ctrl\n-            designer_section_class.all_regions.update\n-            # designer_section_class.main_stack.controls.append(flet_cls)\n-            designer_section_class.main_stack.controls.append(flet_cls)\n-\n-    def save_all(self):\n-        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n-        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n-            json.dumps(self.the_content, indent=4)\n-        )\n-\n-    def add_new_control_to_content(\n-        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n-    ):\n-        \"\"\"Add new control to content.\"\"\"\n-        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            \"control_type\"\n-        ] = control_class_name\n-        self.save_all()\n-\n-    def edit_control_property(\n-        self, control_uniqe_name: str, property_name: str, new_property_value\n-    ):\n-        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n-        if control_uniqe_name not in self.the_content[\"widgets\"]:\n-            raise Exception(\n-                f\"There is no existing control with name '{control_uniqe_name}'\"\n-            )\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            property_name\n-        ] = new_property_value\n-        self.save_all()\n-\n-    def delete_control_property(self, control_uniqe_name: str):\n-        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n-        del self.the_content[\"widgets\"][control_uniqe_name]\n-        self.save_all()\n-\n-    def get_new_control_counter_number(self) -> int:\n-        self.control_counter = self.control_counter + 1\n-        return self.control_counter\n-\n-    # Properties\n-    @property\n-    def is_content_empty(self):\n-        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n-        if self.the_content[\"widgets\"] == {}:\n-            return True\n-        return False\n-\n-    @property\n-    def control_counter(self):\n-        \"\"\"Returns the current control counter number\"\"\"\n-        return self.__control_counter\n-\n-    @control_counter.setter\n-    def control_counter(self, new_value: int):\n-        if not isinstance(new_value, int):\n-            raise ValueError(\n-                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n-            )\n-\n-        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n-            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n-        )\n-        self.__control_counter = new_value\n-        self.save_all()\n"
                },
                {
                    "date": 1702481161167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,16 @@\n         \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n         if not os.path.isfile(self.file_path):\n             create_new_file(file_path=self.file_path)\n \n+    def clamp(n, smallest, largest):\n+        return max(smallest, min(n, largest))\n \n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n+            \n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n"
                },
                {
                    "date": 1702481169146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,18 @@\n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n-            \n+            self.new_left = self.clamp(\n+            (self.selected.left or 0) + e.delta_x,\n+            0 + 5,\n+            full_width - self.selected.width - 5,\n+        )\n+        self.new_top = clamp(\n+            (self.selected.top or 0) + e.delta_y,\n+            0 + 5,\n+            full_height - (self.selected.height * 2) - 35,\n+        )\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n"
                },
                {
                    "date": 1702481175197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n         for ctrl in self.the_content[\"widgets\"]:\n             self.new_left = self.clamp(\n             (self.selected.left or 0) + e.delta_x,\n             0 + 5,\n-            full_width - self.selected.width - 5,\n+            self.full_width - self.selected.width - 5,\n         )\n-        self.new_top = clamp(\n+        self.new_top = self.clamp(\n             (self.selected.top or 0) + e.delta_y,\n             0 + 5,\n             full_height - (self.selected.height * 2) - 35,\n         )\n"
                },
                {
                    "date": 1702481217994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,10 @@\n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n+            full_width = self.page.window_width * (3 / 5)\n+        full_height = 1290 \n             self.new_left = self.clamp(\n             (self.selected.left or 0) + e.delta_x,\n             0 + 5,\n             self.full_width - self.selected.width - 5,\n"
                },
                {
                    "date": 1702481256228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n             full_width = self.page.window_width * (3 / 5)\n-        full_height = 1290 \n+            full_height = 1290 \n             self.new_left = self.clamp(\n             (self.selected.left or 0) + e.delta_x,\n             0 + 5,\n             self.full_width - self.selected.width - 5,\n         )\n-        self.new_top = self.clamp(\n-            (self.selected.top or 0) + e.delta_y,\n-            0 + 5,\n-            full_height - (self.selected.height * 2) - 35,\n-        )\n+            self.new_top = self.clamp(\n+                (self.selected.top or 0) + e.delta_y,\n+                0 + 5,\n+                full_height - (self.selected.height * 2) - 35,\n+            )\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n"
                },
                {
                    "date": 1702481305337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,20 +30,9 @@\n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n-            full_width = self.page.window_width * (3 / 5)\n-            full_height = 1290 \n-            self.new_left = self.clamp(\n-            (self.selected.left or 0) + e.delta_x,\n-            0 + 5,\n-            self.full_width - self.selected.width - 5,\n-        )\n-            self.new_top = self.clamp(\n-                (self.selected.top or 0) + e.delta_y,\n-                0 + 5,\n-                full_height - (self.selected.height * 2) - 35,\n-            )\n+            \n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n"
                },
                {
                    "date": 1702483650242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,16 @@\n     def load_content(self, designer_section_class):\n         \"\"\"Load the content into the canvas (designer).\"\"\"\n         # Add the controls to the 'self.all_controls' of the designer_section_class\n         for ctrl in self.the_content[\"widgets\"]:\n-            \n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n-            designer_section_class.all_regions.update()\n+            \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702483656611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n+            de\n             \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702483664292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n-            de\n+            designer_section_class.un\n             \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702483670343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,8 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.selected = ctrl\n-            designer_section_class.un\n             \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702483706929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+from ..tools.create_new_file import create_new_file\n+import os, json, flet\n+\n+\n+class ParserEngine:\n+    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n+\n+    def __init__(self, file_path: str) -> None:\n+        # Project Information\n+        self.file_path: str = file_path\n+\n+        # Checking\n+        self.create_the_file()\n+\n+        # Experiance\n+        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n+        self.the_content = json.loads(self.file_content)\n+        self.__control_counter = int(\n+            self.the_content[\"page_props\"][\"control_counter_number\"]\n+        )\n+\n+    def create_the_file(self):\n+        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n+        if not os.path.isfile(self.file_path):\n+            create_new_file(file_path=self.file_path)\n+\n+    def clamp(n, smallest, largest):\n+        return max(smallest, min(n, largest))\n+\n+    def load_content(self, designer_section_class):\n+        \"\"\"Load the content into the canvas (designer).\"\"\"\n+        # Add the controls to the 'self.all_controls' of the designer_section_class\n+        for ctrl in self.the_content[\"widgets\"]:\n+            properies = dict(self.the_content[\"widgets\"][ctrl])\n+            control_type_class = properies[\"control_type\"]\n+            del properies[\"control_type\"]\n+            flet_cls = flet.__dict__[control_type_class](**properies)\n+            print(ctrl)\n+            designer_section_class.all_controls.update({ctrl: flet_cls})\n+            designer_section_class.\n+            \n+            # designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.main_stack.controls.append(flet_cls)\n+\n+    def save_all(self):\n+        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n+        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n+            json.dumps(self.the_content, indent=4)\n+        )\n+\n+    def add_new_control_to_content(\n+        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n+    ):\n+        \"\"\"Add new control to content.\"\"\"\n+        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            \"control_type\"\n+        ] = control_class_name\n+        self.save_all()\n+\n+    def edit_control_property(\n+        self, control_uniqe_name: str, property_name: str, new_property_value\n+    ):\n+        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n+        if control_uniqe_name not in self.the_content[\"widgets\"]:\n+            raise Exception(\n+                f\"There is no existing control with name '{control_uniqe_name}'\"\n+            )\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            property_name\n+        ] = new_property_value\n+        self.save_all()\n+\n+    def delete_control_property(self, control_uniqe_name: str):\n+        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n+        del self.the_content[\"widgets\"][control_uniqe_name]\n+        self.save_all()\n+\n+    def get_new_control_counter_number(self) -> int:\n+        self.control_counter = self.control_counter + 1\n+        return self.control_counter\n+\n+    # Properties\n+    @property\n+    def is_content_empty(self):\n+        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n+        if self.the_content[\"widgets\"] == {}:\n+            return True\n+        return False\n+\n+    @property\n+    def control_counter(self):\n+        \"\"\"Returns the current control counter number\"\"\"\n+        return self.__control_counter\n+\n+    @control_counter.setter\n+    def control_counter(self, new_value: int):\n+        if not isinstance(new_value, int):\n+            raise ValueError(\n+                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n+            )\n+\n+        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n+            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n+        )\n+        self.__control_counter = new_value\n+        self.save_all()\n"
                },
                {
                    "date": 1702483712019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.\n+            designer_section_class.itemName\n             \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702483733465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,117 +36,10 @@\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(ctrl)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.itemName\n-            \n-            # designer_section_class.main_stack.controls.append(flet_cls)\n-            designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.itemName=ctrl\n \n-    def save_all(self):\n-        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n-        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n-            json.dumps(self.the_content, indent=4)\n-        )\n-\n-    def add_new_control_to_content(\n-        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n-    ):\n-        \"\"\"Add new control to content.\"\"\"\n-        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            \"control_type\"\n-        ] = control_class_name\n-        self.save_all()\n-\n-    def edit_control_property(\n-        self, control_uniqe_name: str, property_name: str, new_property_value\n-    ):\n-        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n-        if control_uniqe_name not in self.the_content[\"widgets\"]:\n-            raise Exception(\n-                f\"There is no existing control with name '{control_uniqe_name}'\"\n-            )\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            property_name\n-        ] = new_property_value\n-        self.save_all()\n-\n-    def delete_control_property(self, control_uniqe_name: str):\n-        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n-        del self.the_content[\"widgets\"][control_uniqe_name]\n-        self.save_all()\n-\n-    def get_new_control_counter_number(self) -> int:\n-        self.control_counter = self.control_counter + 1\n-        return self.control_counter\n-\n-    # Properties\n-    @property\n-    def is_content_empty(self):\n-        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n-        if self.the_content[\"widgets\"] == {}:\n-            return True\n-        return False\n-\n-    @property\n-    def control_counter(self):\n-        \"\"\"Returns the current control counter number\"\"\"\n-        return self.__control_counter\n-\n-    @control_counter.setter\n-    def control_counter(self, new_value: int):\n-        if not isinstance(new_value, int):\n-            raise ValueError(\n-                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n-            )\n-\n-        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n-            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n-        )\n-        self.__control_counter = new_value\n-        self.save_all()\n-from ..tools.create_new_file import create_new_file\n-import os, json, flet\n-\n-\n-class ParserEngine:\n-    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n-\n-    def __init__(self, file_path: str) -> None:\n-        # Project Information\n-        self.file_path: str = file_path\n-\n-        # Checking\n-        self.create_the_file()\n-\n-        # Experiance\n-        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n-        self.the_content = json.loads(self.file_content)\n-        self.__control_counter = int(\n-            self.the_content[\"page_props\"][\"control_counter_number\"]\n-        )\n-\n-    def create_the_file(self):\n-        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n-        if not os.path.isfile(self.file_path):\n-            create_new_file(file_path=self.file_path)\n-\n-    def clamp(n, smallest, largest):\n-        return max(smallest, min(n, largest))\n-\n-    def load_content(self, designer_section_class):\n-        \"\"\"Load the content into the canvas (designer).\"\"\"\n-        # Add the controls to the 'self.all_controls' of the designer_section_class\n-        for ctrl in self.the_content[\"widgets\"]:\n-            properies = dict(self.the_content[\"widgets\"][ctrl])\n-            control_type_class = properies[\"control_type\"]\n-            del properies[\"control_type\"]\n-            flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(ctrl)\n-            designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.selected = ctrl\n-            \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702483913411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(ctrl)\n+            print(f)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.itemName=ctrl\n+            designer_section_class.itemName = ctrl\n \n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n"
                },
                {
                    "date": 1702483967494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,11 @@\n             properies = dict(self.the_content[\"widgets\"][ctrl])\n             control_type_class = properies[\"control_type\"]\n             del properies[\"control_type\"]\n             flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(f)\n+            print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n-\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702483980635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n+            de\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702483990406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n-            de\n+            designer_section_class\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702483997550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n-            designer_section_class\n+            designer_section_class.selected\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702484003503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n-            designer_section_class.selected\n+            designer_section_class.selected=f\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n \n     def save_all(self):\n"
                },
                {
                    "date": 1702484675777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,12 @@\n             flet_cls = flet.__dict__[control_type_class](**properies)\n             print(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n-            designer_section_class.selected=f\n+            designer_section_class.selected = flet_cls\n             # designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.main_stack.controls.append(flet_cls)\n+            \n \n     def save_all(self):\n         \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n         open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n"
                },
                {
                    "date": 1702484687299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+from ..tools.create_new_file import create_new_file\n+import os, json, flet\n+\n+\n+class ParserEngine:\n+    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n+\n+    def __init__(self, file_path: str) -> None:\n+        # Project Information\n+        self.file_path: str = file_path\n+\n+        # Checking\n+        self.create_the_file()\n+\n+        # Experiance\n+        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n+        self.the_content = json.loads(self.file_content)\n+        self.__control_counter = int(\n+            self.the_content[\"page_props\"][\"control_counter_number\"]\n+        )\n+\n+    def create_the_file(self):\n+        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n+        if not os.path.isfile(self.file_path):\n+            create_new_file(file_path=self.file_path)\n+\n+    def clamp(n, smallest, largest):\n+        return max(smallest, min(n, largest))\n+\n+    def load_content(self, designer_section_class):\n+        \"\"\"Load the content into the canvas (designer).\"\"\"\n+        # Add the controls to the 'self.all_controls' of the designer_section_class\n+        for ctrl in self.the_content[\"widgets\"]:\n+            properies = dict(self.the_content[\"widgets\"][ctrl])\n+            control_type_class = properies[\"control_type\"]\n+            del properies[\"control_type\"]\n+            flet_cls = flet.__dict__[control_type_class](**properies)\n+            print(flet_cls)\n+            # designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.main_stack.controls.append(flet_cls)\n+            designer_section_class.all_controls.update({ctrl: flet_cls})\n+            designer_section_class.itemName = ctrl\n+            designer_section_class.selected = flet_cls\n+            \n+\n+    def save_all(self):\n+        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n+        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n+            json.dumps(self.the_content, indent=4)\n+        )\n+\n+    def add_new_control_to_content(\n+        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n+    ):\n+        \"\"\"Add new control to content.\"\"\"\n+        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            \"control_type\"\n+        ] = control_class_name\n+        self.save_all()\n+\n+    def edit_control_property(\n+        self, control_uniqe_name: str, property_name: str, new_property_value\n+    ):\n+        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n+        if control_uniqe_name not in self.the_content[\"widgets\"]:\n+            raise Exception(\n+                f\"There is no existing control with name '{control_uniqe_name}'\"\n+            )\n+        self.the_content[\"widgets\"][control_uniqe_name][\n+            property_name\n+        ] = new_property_value\n+        self.save_all()\n+\n+    def delete_control_property(self, control_uniqe_name: str):\n+        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n+        del self.the_content[\"widgets\"][control_uniqe_name]\n+        self.save_all()\n+\n+    def get_new_control_counter_number(self) -> int:\n+        self.control_counter = self.control_counter + 1\n+        return self.control_counter\n+\n+    # Properties\n+    @property\n+    def is_content_empty(self):\n+        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n+        if self.the_content[\"widgets\"] == {}:\n+            return True\n+        return False\n+\n+    @property\n+    def control_counter(self):\n+        \"\"\"Returns the current control counter number\"\"\"\n+        return self.__control_counter\n+\n+    @control_counter.setter\n+    def control_counter(self, new_value: int):\n+        if not isinstance(new_value, int):\n+            raise ValueError(\n+                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n+            )\n+\n+        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n+            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n+        )\n+        self.__control_counter = new_value\n+        self.save_all()\n"
                },
                {
                    "date": 1702484694402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n             designer_section_class.selected = flet_cls\n-            \n+            de\n \n     def save_all(self):\n         \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n         open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n@@ -105,112 +105,4 @@\n             self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n         )\n         self.__control_counter = new_value\n         self.save_all()\n-from ..tools.create_new_file import create_new_file\n-import os, json, flet\n-\n-\n-class ParserEngine:\n-    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n-\n-    def __init__(self, file_path: str) -> None:\n-        # Project Information\n-        self.file_path: str = file_path\n-\n-        # Checking\n-        self.create_the_file()\n-\n-        # Experiance\n-        self.file_content: str = open(file_path, encoding=\"utf-8\").read()\n-        self.the_content = json.loads(self.file_content)\n-        self.__control_counter = int(\n-            self.the_content[\"page_props\"][\"control_counter_number\"]\n-        )\n-\n-    def create_the_file(self):\n-        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n-        if not os.path.isfile(self.file_path):\n-            create_new_file(file_path=self.file_path)\n-\n-    def clamp(n, smallest, largest):\n-        return max(smallest, min(n, largest))\n-\n-    def load_content(self, designer_section_class):\n-        \"\"\"Load the content into the canvas (designer).\"\"\"\n-        # Add the controls to the 'self.all_controls' of the designer_section_class\n-        for ctrl in self.the_content[\"widgets\"]:\n-            properies = dict(self.the_content[\"widgets\"][ctrl])\n-            control_type_class = properies[\"control_type\"]\n-            del properies[\"control_type\"]\n-            flet_cls = flet.__dict__[control_type_class](**properies)\n-            print(flet_cls)\n-            designer_section_class.all_controls.update({ctrl: flet_cls})\n-            designer_section_class.itemName = ctrl\n-            designer_section_class.selected = flet_cls\n-            # designer_section_class.main_stack.controls.append(flet_cls)\n-            designer_section_class.main_stack.controls.append(flet_cls)\n-            \n-\n-    def save_all(self):\n-        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n-        open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n-            json.dumps(self.the_content, indent=4)\n-        )\n-\n-    def add_new_control_to_content(\n-        self, control_uniqe_name: str, control_dict: dict, control_class_name: str\n-    ):\n-        \"\"\"Add new control to content.\"\"\"\n-        self.the_content[\"widgets\"].update({control_uniqe_name: control_dict})\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            \"control_type\"\n-        ] = control_class_name\n-        self.save_all()\n-\n-    def edit_control_property(\n-        self, control_uniqe_name: str, property_name: str, new_property_value\n-    ):\n-        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n-        if control_uniqe_name not in self.the_content[\"widgets\"]:\n-            raise Exception(\n-                f\"There is no existing control with name '{control_uniqe_name}'\"\n-            )\n-        self.the_content[\"widgets\"][control_uniqe_name][\n-            property_name\n-        ] = new_property_value\n-        self.save_all()\n-\n-    def delete_control_property(self, control_uniqe_name: str):\n-        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n-        del self.the_content[\"widgets\"][control_uniqe_name]\n-        self.save_all()\n-\n-    def get_new_control_counter_number(self) -> int:\n-        self.control_counter = self.control_counter + 1\n-        return self.control_counter\n-\n-    # Properties\n-    @property\n-    def is_content_empty(self):\n-        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n-        if self.the_content[\"widgets\"] == {}:\n-            return True\n-        return False\n-\n-    @property\n-    def control_counter(self):\n-        \"\"\"Returns the current control counter number\"\"\"\n-        return self.__control_counter\n-\n-    @control_counter.setter\n-    def control_counter(self, new_value: int):\n-        if not isinstance(new_value, int):\n-            raise ValueError(\n-                f\"control_counter accept value with type 'int' only, not {type(new_value)}\"\n-            )\n-\n-        self.the_content[\"page_props\"][\"control_counter_number\"] = (\n-            self.the_content[\"page_props\"][\"control_counter_number\"] + 1\n-        )\n-        self.__control_counter = new_value\n-        self.save_all()\n"
                },
                {
                    "date": 1702484699532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n             designer_section_class.selected = flet_cls\n-            de\n+            designer_section_class.\n \n     def save_all(self):\n         \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n         open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n"
                },
                {
                    "date": 1702484708943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n             designer_section_class.selected = flet_cls\n-            designer_section_class.on\n+            designer_section_class.itemse\n \n     def save_all(self):\n         \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n         open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n"
                },
                {
                    "date": 1702484761014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             designer_section_class.main_stack.controls.append(flet_cls)\n             designer_section_class.all_controls.update({ctrl: flet_cls})\n             designer_section_class.itemName = ctrl\n             designer_section_class.selected = flet_cls\n-            designer_section_class.itemselection(\"\",)\n+            designer_section_class.itemselection(\"\",ctrl)\n \n     def save_all(self):\n         \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n         open(self.file_path, \"w+\", encoding=\"utf-8\").write(\n"
                }
            ],
            "date": 1702479436767,
            "name": "Commit-0",
            "content": "from ..tools.create_new_file import create_new_file\nimport os, json, flet\n\n\n\nclass ParserEngine:\n    \"\"\"The Parser Engine is the one that responsible for saving & Editing the canvas content. It have an automatic saver built-in.\"\"\"\n    def __init__(self, file_path:str) -> None:\n        # Project Information\n        self.file_path : str = file_path\n\n        # Checking\n        self.create_the_file()\n\n        # Experiance\n        self.file_content : str = open(file_path, encoding=\"utf-8\").read()\n        self.the_content = json.loads(self.file_content)\n        self.__control_counter = int(self.the_content['page_props']['control_counter_number'])\n        \n\n    def create_the_file (self):\n        \"\"\"Check if the file is not exist, if not then create the file if not exists\"\"\"\n        if not os.path.isfile(self.file_path):\n            create_new_file(file_path=self.file_path)\n\n    def load_content (self, designer_section_class):\n        \"\"\"Load the content into the canvas (designer).\"\"\"\n        # Add the controls to the 'self.all_controls' of the designer_section_class\n        for ctrl in self.the_content['widgets']:\n            properies = dict(self.the_content['widgets'][ctrl])\n            control_type_class = properies['control_type']\n            del properies['control_type']\n            flet_cls = flet.__dict__[control_type_class](**properies)\n            designer_section_class.all_controls.update({\n                ctrl: flet_cls\n            })\n            designer_section_class.all_controls.update({\n                ctrl: flet_cls\n            })\n            # designer_section_class.main_stack.controls.append(flet_cls)\n            designer_section_class.main_stack.controls.append(flet_cls)\n\n\n    def save_all (self):\n        \"\"\"This function will save all the changes by overwrite the content in the file.\"\"\"\n        open(self.file_path, \"w+\", encoding=\"utf-8\").write(json.dumps(self.the_content, indent=4))\n\n    def add_new_control_to_content (self, control_uniqe_name:str, control_dict:dict, control_class_name:str):\n        \"\"\"Add new control to content.\"\"\"\n        self.the_content['widgets'].update({control_uniqe_name: control_dict})\n        self.the_content['widgets'][control_uniqe_name]['control_type'] = control_class_name\n        self.save_all()\n\n    def edit_control_property (self, control_uniqe_name:str, property_name:str, new_property_value):\n        \"\"\"Edit an existed control's property. It need the control order number in the `widgets` list.\"\"\"\n        if control_uniqe_name not in self.the_content['widgets']:\n            raise Exception(f\"There is no existing control with name '{control_uniqe_name}'\")\n        self.the_content['widgets'][control_uniqe_name][property_name] = new_property_value\n        self.save_all()\n\n    def delete_control_property (self, control_uniqe_name:str):\n        \"\"\"Delete an existed control. It need the control order number in the `widgets` list.\"\"\"\n        del self.the_content['widgets'][control_uniqe_name]\n        self.save_all()\n\n    def get_new_control_counter_number (self) -> int:\n        self.control_counter = self.control_counter + 1\n        return self.control_counter\n\n    # Properties\n    @property\n    def is_content_empty (self):\n        \"\"\"Returns `True` if there is not widgets in the page, Meaning that there is no content.\"\"\"\n        if self.the_content['widgets'] == {}:\n            return True\n        return False\n    \n    @property\n    def control_counter (self):\n        \"\"\"Returns the current control counter number\"\"\"\n        return self.__control_counter\n\n    @control_counter.setter\n    def control_counter(self, new_value:int):\n        if not isinstance(new_value, int):\n            raise ValueError(f\"control_counter accept value with type 'int' only, not {type(new_value)}\")\n        \n        self.the_content['page_props']['control_counter_number'] = self.the_content['page_props']['control_counter_number'] + 1\n        self.__control_counter = new_value\n        self.save_all()"
        }
    ]
}