{
    "sourceFile": "FletDesigner/UI/Interactive_Manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1702582305080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702582313258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n+                p\n                 \n             )\n \n             self.object_controller.selected.update()\n"
                },
                {
                    "date": 1702582321177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,10 @@\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n-                p\n                 \n+                \n             )\n \n             self.object_controller.selected.update()\n             self.detail.gradient_hex_holder.content.value = color1\n"
                },
                {
                    "date": 1702582331182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,10 @@\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n+                new_property_value=ne\n                 \n-                \n             )\n \n             self.object_controller.selected.update()\n             self.detail.gradient_hex_holder.content.value = color1\n"
                },
                {
                    "date": 1702582338148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,10 @@\n                 begin=ft.alignment.top_right,\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n+            \n+            new_gradient\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n"
                },
                {
                    "date": 1702582345494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n             \n-            new_gradient\n+            new_gradient_prop_vlaue=\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n"
                },
                {
                    "date": 1702582351966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,14 +139,14 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n             \n-            new_gradient_prop_vlaue=\n+            new_gradient_prop_vlaue=f\"\"\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n-                new_property_value=ne\n+                new_property_value=new_gradient_prop_vlaue\n                 \n             )\n \n             self.object_controller.selected.update()\n"
                },
                {
                    "date": 1702582415203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n             \n-            new_gradient_prop_vlaue=f\"\"\n+            new_gradient_prop_vlaue=f\"ft.LinearGradient(begin=ft.alignment.top_right,end=ft.alignment.bottom_left,color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n"
                },
                {
                    "date": 1702582421541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,16 +138,16 @@\n                 begin=ft.alignment.top_right,\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n-            \n-            new_gradient_prop_vlaue=f\"ft.LinearGradient(begin=ft.alignment.top_right,end=ft.alignment.bottom_left,color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n \n+            new_gradient_prop_vlaue = f\"ft.LinearGradient(begin=ft.alignment.top_right,\n+            end=ft.alignment.bottom_left,color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n+\n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n-                new_property_value=new_gradient_prop_vlaue\n-                \n+                new_property_value=new_gradient_prop_vlaue,\n             )\n \n             self.object_controller.selected.update()\n             self.detail.gradient_hex_holder.content.value = color1\n"
                },
                {
                    "date": 1702582429279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,10 +139,11 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n \n-            new_gradient_prop_vlaue = f\"ft.LinearGradient(begin=ft.alignment.top_right,\n-            end=ft.alignment.bottom_left,color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n+            new_gradient_prop_vlaue = fft.LinearGradient(begin=ft.alignment.top_right,\n+            end=ft.alignment.bottom_left,\n+            color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n \n             self.parser_engine.edit_control_property(\n                 control_uniqe_name=self.object_controller.unique_name,\n                 property_name=\"gradient\",\n"
                },
                {
                    "date": 1702582434687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n \n-            new_gradient_prop_vlaue = fft.LinearGradient(begin=ft.alignment.top_right,\n+            new_gradient_prop_vlaue = f'''ft.LinearGradient(begin=ft.alignment.top_right,\n             end=ft.alignment.bottom_left,\n             color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\n \n             self.parser_engine.edit_control_property(\n"
                },
                {
                    "date": 1702582455801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,10 @@\n                 end=ft.alignment.bottom_left,\n                 colors=[color1, color2],\n             )\n \n-            new_gradient_prop_vlaue = f\"\"\"ft.LinearGradient(begin=ft.alignment.top_right,\n+            new_gradient_prop_vlaue = f\"\"\"ft.LinearGradient(\n+            begin=ft.alignment.top_right,\n             end=ft.alignment.bottom_left,\n             color=[ft.colors.DEEP_PURPLE_ACCENT,ft.colors.CYAN_100])\"\"\"\n \n             self.parser_engine.edit_control_property(\n"
                },
                {
                    "date": 1702582473048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,196 @@\n+from .Properties_Toolbar import PropertiesToolbar\n+from ..Parser.parser import ParserEngine\n+import flet as ft\n+\n+\n+class IManager:\n+    detail: PropertiesToolbar = None\n+    object_controller = None\n+    defualt_properties = {\n+        \"width\": \"\",\n+        \"height\": \"\",\n+        \"opacity\": \"\",\n+        \"bg_color\": \"\",\n+    }  # properties add them\n+\n+    def __init__(self, parser_engine: ParserEngine) -> None:\n+        self.parser_engine = parser_engine\n+\n+    def submit(self, e):\n+        self.defualt_properties.u\n+\n+    # will chanage the propeties to have be if present and invisible if absent !important\n+\n+    def select(\n+        self,\n+        width=None,\n+        heigth=None,\n+        opacity=None,\n+        defualt_properties=None,\n+        name=None,\n+        unique_name=None,\n+    ):\n+        if defualt_properties == None:\n+            self.detail.control_width.content.value = width\n+            self.detail.control_height.content.value = heigth\n+            self.detail.control_opacity.content.value = float(opacity)\n+            # self.color_box,\n+        else:\n+            self.detail.control_width.content.value = defualt_properties[\n+                \"width\"\n+            ]  # could change this to use controlrefs instead\n+            self.detail.control_height.content.value = defualt_properties[\"height\"]\n+            if defualt_properties[\"opacity\"] != \"\":\n+                defualt_properties[\"opacity\"] = float(\n+                    defualt_properties[\"opacity\"]\n+                )  # change incase\n+            self.detail.control_opacity.content.value = defualt_properties[\"opacity\"]\n+        self.detail.control_name_space.content.value = name\n+        self.detail.update()\n+\n+    def change_property(\n+        self,\n+        prop: str,\n+        value=None,\n+        end=None,\n+        value_gradient=None,\n+        begin=None,\n+        rotation=None,\n+    ):\n+        if self.object_controller.selected is not None:\n+            control_unique_name = self.object_controller.control_to_name.get(\n+                self.object_controller.selected\n+            )\n+\n+            # print(self.object_controller.selected.__dict__.get(\"Unique_Name\"))\n+            # print(self.object_controller.selected)\n+\n+            # print(self.object_controller.unique_name)\n+\n+            # print(self.object_controller.selected.__dict__)\n+\n+        if prop == \"-o\":\n+            if value.replace(\".\", \"\").isnumeric() and value.__contains__(\".\"):\n+                self.object_controller.selected.opacity = float(value)\n+                self.parser_engine.edit_control_property(\n+                    control_uniqe_name=self.object_controller.unique_name,\n+                    property_name=\"opacity\",\n+                    new_property_value=float(value),\n+                )\n+        if prop == \"-w\":\n+            if value := self.check_value(\"x\", value):\n+                self.object_controller.selected.width = value\n+\n+                self.parser_engine.edit_control_property(\n+                    control_uniqe_name=self.object_controller.unique_name,\n+                    property_name=\"width\",\n+                    new_property_value=value,\n+                )\n+        if prop == \"-h\":\n+            if value := self.check_value(\"y\", value):\n+                self.object_controller.selected.height = value\n+                self.parser_engine.edit_control_property(\n+                    control_uniqe_name=self.object_controller.unique_name,\n+                    property_name=\"height\",\n+                    new_property_value=value,\n+                )\n+        if prop == \"-c\":\n+            self.object_controller.selected.bgcolor = value  # check if this exists\n+            self.parser_engine.edit_control_property(\n+                control_uniqe_name=self.object_controller.unique_name,\n+                property_name=\"bgcolor\",\n+                new_property_value=value,\n+            )\n+        if prop == \"-b\":\n+            self.object_controller.selected.border_radius = int(value)\n+            # self.object_controller.outlineContainer.border_radius = int(value)\n+            self.parser_engine.edit_control_property(\n+                control_uniqe_name=self.object_controller.unique_name,\n+                property_name=\"border_radius\",\n+                new_property_value=int(value),\n+            )\n+        if prop == \"-gc\":\n+            if value:\n+                color1 = value\n+                self.last_color1 = (\n+                    value  # Store the last color value chosen by the user\n+                )\n+            else:\n+                color1 = (\n+                    self.last_color1\n+                    if hasattr(self, \"last_color1\")\n+                    else ft.colors.CYAN_100\n+                )\n+\n+            if value_gradient:\n+                color2 = value_gradient\n+                self.last_color2 = (\n+                    value_gradient  # Store the last color value chosen by the user\n+                )\n+            else:\n+                color2 = (\n+                    self.last_color2\n+                    if hasattr(self, \"last_color2\")\n+                    else ft.colors.DEEP_PURPLE_ACCENT\n+                )\n+\n+            self.grad = self.object_controller.selected.gradient = ft.LinearGradient(\n+                begin=ft.alignment.top_right,\n+                end=ft.alignment.bottom_left,\n+                colors=[color1, color2],\n+            )\n+\n+            new_gradient_prop_vlaue = f\"\"\"ft.LinearGradient(\n+            begin=ft.alignment.top_right,\n+            end=ft.alignment.bottom_left,\n+            color=[{co},ft.colors.CYAN_100])\"\"\"\n+\n+            self.parser_engine.edit_control_property(\n+                control_uniqe_name=self.object_controller.unique_name,\n+                property_name=\"gradient\",\n+                new_property_value=new_gradient_prop_vlaue,\n+            )\n+\n+            self.object_controller.selected.update()\n+            self.detail.gradient_hex_holder.content.value = color1\n+            self.detail.gradient_hex_holder1.content.value = color2\n+            self.detail.gradient_color_holder.bgcolor = color1\n+            self.detail.gradient_color_holder1.bgcolor = color2\n+            self.detail.gradient_hex_holder.update()\n+            self.detail.gradient_hex_holder1.update()\n+            self.detail.gradient_color_holder.update()\n+            self.detail.gradient_color_holder1.update()\n+        if prop == \"-gcr\":\n+            self.object_controller.selected.gradient = None\n+            self.object_controller.selected.update()\n+            self.object_controller.show_outline()\n+        if prop == \"-change_begin\":\n+            self.object_controller.selected.gradient.begin = begin\n+            end_value = ft.alignment.top_left  # Default value\n+            if self.detail.choose_end.content.value == \"top_left\":\n+                end_value = ft.alignment.top_left\n+            self.object_controller.selected.gradient.end = end_value\n+            self.object_controller.selected.update()\n+        if prop == \"-change_end\":\n+            self.object_controller.selected.gradient.end = end\n+            self.object_controller.selected.update()\n+        if prop == \"-rotation\":\n+            self.object_controller.selected.gradient.rotation = rotation\n+            self.object_controller.selected.update()\n+        self.object_controller.selected.update()\n+        self.object_controller.show_outline()\n+\n+    def check_value(self, region=\"x\", value=\"0\"):\n+        if value.isnumeric():\n+            value = int(value)\n+            if value != 0:\n+                item = self.object_controller.all_regions[\n+                    self.object_controller.itemName\n+                ]\n+                item[\"end_\" + region] += (\n+                    -(item[\"end_\" + region] - item[\"begin_\" + region]) + value\n+                )\n+                return value\n+        return False\n+\n+        self.detail.update()\n"
                }
            ],
            "date": 1702582305080,
            "name": "Commit-0",
            "content": "from .Properties_Toolbar import PropertiesToolbar\nfrom ..Parser.parser import ParserEngine\nimport flet as ft\n\n\nclass IManager:\n    detail: PropertiesToolbar = None\n    object_controller = None\n    defualt_properties = {\n        \"width\": \"\",\n        \"height\": \"\",\n        \"opacity\": \"\",\n        \"bg_color\": \"\",\n    }  # properties add them\n\n    def __init__(self, parser_engine: ParserEngine) -> None:\n        self.parser_engine = parser_engine\n\n    def submit(self, e):\n        self.defualt_properties.u\n\n    # will chanage the propeties to have be if present and invisible if absent !important\n\n    def select(\n        self,\n        width=None,\n        heigth=None,\n        opacity=None,\n        defualt_properties=None,\n        name=None,\n        unique_name=None,\n    ):\n        if defualt_properties == None:\n            self.detail.control_width.content.value = width\n            self.detail.control_height.content.value = heigth\n            self.detail.control_opacity.content.value = float(opacity)\n            # self.color_box,\n        else:\n            self.detail.control_width.content.value = defualt_properties[\n                \"width\"\n            ]  # could change this to use controlrefs instead\n            self.detail.control_height.content.value = defualt_properties[\"height\"]\n            if defualt_properties[\"opacity\"] != \"\":\n                defualt_properties[\"opacity\"] = float(\n                    defualt_properties[\"opacity\"]\n                )  # change incase\n            self.detail.control_opacity.content.value = defualt_properties[\"opacity\"]\n        self.detail.control_name_space.content.value = name\n        self.detail.update()\n\n    def change_property(\n        self,\n        prop: str,\n        value=None,\n        end=None,\n        value_gradient=None,\n        begin=None,\n        rotation=None,\n    ):\n        if self.object_controller.selected is not None:\n            control_unique_name = self.object_controller.control_to_name.get(\n                self.object_controller.selected\n            )\n\n            # print(self.object_controller.selected.__dict__.get(\"Unique_Name\"))\n            # print(self.object_controller.selected)\n\n            # print(self.object_controller.unique_name)\n\n            # print(self.object_controller.selected.__dict__)\n\n        if prop == \"-o\":\n            if value.replace(\".\", \"\").isnumeric() and value.__contains__(\".\"):\n                self.object_controller.selected.opacity = float(value)\n                self.parser_engine.edit_control_property(\n                    control_uniqe_name=self.object_controller.unique_name,\n                    property_name=\"opacity\",\n                    new_property_value=float(value),\n                )\n        if prop == \"-w\":\n            if value := self.check_value(\"x\", value):\n                self.object_controller.selected.width = value\n\n                self.parser_engine.edit_control_property(\n                    control_uniqe_name=self.object_controller.unique_name,\n                    property_name=\"width\",\n                    new_property_value=value,\n                )\n        if prop == \"-h\":\n            if value := self.check_value(\"y\", value):\n                self.object_controller.selected.height = value\n                self.parser_engine.edit_control_property(\n                    control_uniqe_name=self.object_controller.unique_name,\n                    property_name=\"height\",\n                    new_property_value=value,\n                )\n        if prop == \"-c\":\n            self.object_controller.selected.bgcolor = value  # check if this exists\n            self.parser_engine.edit_control_property(\n                control_uniqe_name=self.object_controller.unique_name,\n                property_name=\"bgcolor\",\n                new_property_value=value,\n            )\n        if prop == \"-b\":\n            self.object_controller.selected.border_radius = int(value)\n            # self.object_controller.outlineContainer.border_radius = int(value)\n            self.parser_engine.edit_control_property(\n                control_uniqe_name=self.object_controller.unique_name,\n                property_name=\"border_radius\",\n                new_property_value=int(value),\n            )\n        if prop == \"-gc\":\n            if value:\n                color1 = value\n                self.last_color1 = (\n                    value  # Store the last color value chosen by the user\n                )\n            else:\n                color1 = (\n                    self.last_color1\n                    if hasattr(self, \"last_color1\")\n                    else ft.colors.CYAN_100\n                )\n\n            if value_gradient:\n                color2 = value_gradient\n                self.last_color2 = (\n                    value_gradient  # Store the last color value chosen by the user\n                )\n            else:\n                color2 = (\n                    self.last_color2\n                    if hasattr(self, \"last_color2\")\n                    else ft.colors.DEEP_PURPLE_ACCENT\n                )\n\n            self.grad = self.object_controller.selected.gradient = ft.LinearGradient(\n                begin=ft.alignment.top_right,\n                end=ft.alignment.bottom_left,\n                colors=[color1, color2],\n            )\n\n            self.parser_engine.edit_control_property(\n                control_uniqe_name=self.object_controller.unique_name,\n                property_name=\"gradient\",\n                \n            )\n\n            self.object_controller.selected.update()\n            self.detail.gradient_hex_holder.content.value = color1\n            self.detail.gradient_hex_holder1.content.value = color2\n            self.detail.gradient_color_holder.bgcolor = color1\n            self.detail.gradient_color_holder1.bgcolor = color2\n            self.detail.gradient_hex_holder.update()\n            self.detail.gradient_hex_holder1.update()\n            self.detail.gradient_color_holder.update()\n            self.detail.gradient_color_holder1.update()\n        if prop == \"-gcr\":\n            self.object_controller.selected.gradient = None\n            self.object_controller.selected.update()\n            self.object_controller.show_outline()\n        if prop == \"-change_begin\":\n            self.object_controller.selected.gradient.begin = begin\n            end_value = ft.alignment.top_left  # Default value\n            if self.detail.choose_end.content.value == \"top_left\":\n                end_value = ft.alignment.top_left\n            self.object_controller.selected.gradient.end = end_value\n            self.object_controller.selected.update()\n        if prop == \"-change_end\":\n            self.object_controller.selected.gradient.end = end\n            self.object_controller.selected.update()\n        if prop == \"-rotation\":\n            self.object_controller.selected.gradient.rotation = rotation\n            self.object_controller.selected.update()\n        self.object_controller.selected.update()\n        self.object_controller.show_outline()\n\n    def check_value(self, region=\"x\", value=\"0\"):\n        if value.isnumeric():\n            value = int(value)\n            if value != 0:\n                item = self.object_controller.all_regions[\n                    self.object_controller.itemName\n                ]\n                item[\"end_\" + region] += (\n                    -(item[\"end_\" + region] - item[\"begin_\" + region]) + value\n                )\n                return value\n        return False\n\n        self.detail.update()\n"
        }
    ]
}