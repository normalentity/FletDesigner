{
    "sourceFile": "FletDesigner/Parser/Initialize_Control.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1702566579814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702566748426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         # to store all the control names for the user to access\n         self.keys = {}\n \n     def Initialize_Components(self, key, val, parent=None):\n-        if val[\"type\"] == \"Container\":\n+        if val[\"contype\"] == \"Container\":\n             # self.keys[f\"{key}\"] = ft.Container()\n             control = ft.Container()\n             control.width = val[\"width\"]\n             control.height = val[\"height\"]\n@@ -79,5 +79,5 @@\n                 # the val and the key variables are the keys and values we retrieve from the json file\n                 self.Initialize_Components(\n                     key,\n                     val,\n-                )\n\\ No newline at end of file\n+                )\n"
                },
                {
                    "date": 1702566763237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n                     #     print(\"not kut\")\n             else:\n                 return None\n \n-        if val[\"type\"] == \"IconButton\":\n+        if val[\"control_type\"] == \"IconButton\":\n             control = ft.TextButton()\n             control.width = val[\"width\"]\n             control.height = val[\"height\"]\n             control.bgcolor = val[\"bgcolor\"]\n"
                },
                {
                    "date": 1702566986830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import flet as ft\n+import json\n+\n+# from .initialize_control import Initialize_Components\n+\n+\n+class Parser:\n+    def __init__(self, jsonfilepath=None):\n+        if jsonfilepath:\n+            with open(jsonfilepath) as f:\n+                self.json = json.load(f)\n+        # to store all the control names for the user to access\n+        self.keys = {}\n+\n+    def Initialize_Components(self, key, val, parent=None):\n+        if val[\"control_type\"] == \"Container\":\n+            # self.keys[f\"{key}\"] = ft.Container()\n+            control = ft.Container()\n+            control.width = val[\"width\"]\n+            control.height = val[\"height\"]\n+            control.opacity = val[\"opacity\"]\n+            control.bgcolor = val[\"bgcolor\"]\n+            control.border_radius = ft.border_radius.all(val[\"border_radius\"])\n+            self.padding = val.get(\"padding\")\n+            if self.padding is not None:\n+                left = val[\"padding\"][\"left\"]\n+                right = val[\"padding\"][\"right\"]\n+                bottom = val[\"padding\"][\"bottom\"]\n+                top = val[\"padding\"][\"top\"]\n+                control.padding = ft.padding.only(\n+                    left=left, right=right, bottom=bottom, top=top\n+                )\n+\n+            if parent is None:\n+                self.keys[f\"{key}\"] = control\n+            else:\n+                self.keys[f\"{parent}\"].content.controls.append(control)\n+\n+            if \"content\" in val:\n+                if val[\"content\"][\"type\"] == \"Row\":\n+                    control.content = ft.Row()\n+                if val[\"content\"][\"type\"] == \"Column\":\n+                    control.content = ft.Column()\n+\n+                for item in val[\"content\"][\"controls\"]:\n+                    for childKey, childVal in item.items():\n+                        self.Initialize_Components(\n+                            val=childVal, key=childKey, parent=key\n+                        )\n+\n+                    # Initialize_Components(self, key, val)\n+                    # if val[\"controls\"] in val[\"content\"]:\n+                    #     print(\"Control\")\n+                    # else:\n+                    #     print(\"not kut\")\n+            else:\n+                return None\n+\n+        if val[\"control_type\"] == \"IconButton\":\n+            control = ft.TextButton()\n+            control.width = val[\"width\"]\n+            control.height = val[\"height\"]\n+            control.bgcolor = val[\"bgcolor\"]\n+            control.text = val[\"text\"]\n+            control.icon = val[\"icon\"]\n+            self.opacity = val.get(\"opacity\")\n+            if self.opacity is not None:\n+                control.opacity = val[\"opacity\"]\n+            if parent is None:\n+                self.keys[f\"{key}\"] = control\n+            else:\n+                control.__dict__[\"isChild\"] = True\n+                self.keys[f\"{key}\"] = control\n+                self.keys[f\"{parent}\"].content.controls.append(control)\n+\n+    def parse(self):\n+        for item in self.json:\n+            for key, val in item.items():\n+                print()\n+                # the val and the key variables are the keys and values we retrieve from the json file\n+                self.Initialize_Components(\n+                    key,\n+                    val,\n+                )\n"
                },
                {
                    "date": 1702567002113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,94 +74,9 @@\n                 self.keys[f\"{parent}\"].content.controls.append(control)\n \n     def parse(self):\n         for item in self.json:\n-            for key, val in item.items():\n-                print()\n                 # the val and the key variables are the keys and values we retrieve from the json file\n                 self.Initialize_Components(\n                     key,\n                     val,\n                 )\n-import flet as ft\n-import json\n-\n-# from .initialize_control import Initialize_Components\n-\n-\n-class Parser:\n-    def __init__(self, jsonfilepath=None):\n-        if jsonfilepath:\n-            with open(jsonfilepath) as f:\n-                self.json = json.load(f)\n-        # to store all the control names for the user to access\n-        self.keys = {}\n-\n-    def Initialize_Components(self, key, val, parent=None):\n-        if val[\"contype\"] == \"Container\":\n-            # self.keys[f\"{key}\"] = ft.Container()\n-            control = ft.Container()\n-            control.width = val[\"width\"]\n-            control.height = val[\"height\"]\n-            control.opacity = val[\"opacity\"]\n-            control.bgcolor = val[\"bgcolor\"]\n-            control.border_radius = ft.border_radius.all(val[\"border_radius\"])\n-            self.padding = val.get(\"padding\")\n-            if self.padding is not None:\n-                left = val[\"padding\"][\"left\"]\n-                right = val[\"padding\"][\"right\"]\n-                bottom = val[\"padding\"][\"bottom\"]\n-                top = val[\"padding\"][\"top\"]\n-                control.padding = ft.padding.only(\n-                    left=left, right=right, bottom=bottom, top=top\n-                )\n-\n-            if parent is None:\n-                self.keys[f\"{key}\"] = control\n-            else:\n-                self.keys[f\"{parent}\"].content.controls.append(control)\n-\n-            if \"content\" in val:\n-                if val[\"content\"][\"type\"] == \"Row\":\n-                    control.content = ft.Row()\n-                if val[\"content\"][\"type\"] == \"Column\":\n-                    control.content = ft.Column()\n-\n-                for item in val[\"content\"][\"controls\"]:\n-                    for childKey, childVal in item.items():\n-                        self.Initialize_Components(\n-                            val=childVal, key=childKey, parent=key\n-                        )\n-\n-                    # Initialize_Components(self, key, val)\n-                    # if val[\"controls\"] in val[\"content\"]:\n-                    #     print(\"Control\")\n-                    # else:\n-                    #     print(\"not kut\")\n-            else:\n-                return None\n-\n-        if val[\"control_type\"] == \"IconButton\":\n-            control = ft.TextButton()\n-            control.width = val[\"width\"]\n-            control.height = val[\"height\"]\n-            control.bgcolor = val[\"bgcolor\"]\n-            control.text = val[\"text\"]\n-            control.icon = val[\"icon\"]\n-            self.opacity = val.get(\"opacity\")\n-            if self.opacity is not None:\n-                control.opacity = val[\"opacity\"]\n-            if parent is None:\n-                self.keys[f\"{key}\"] = control\n-            else:\n-                control.__dict__[\"isChild\"] = True\n-                self.keys[f\"{key}\"] = control\n-                self.keys[f\"{parent}\"].content.controls.append(control)\n-\n-    def parse(self):\n-        for item in self.json:\n-            for key, val in item.items():\n-                # the val and the key variables are the keys and values we retrieve from the json file\n-                self.Initialize_Components(\n-                    key,\n-                    val,\n-                )\n"
                },
                {
                    "date": 1702567008510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n                 self.keys[f\"{key}\"] = control\n                 self.keys[f\"{parent}\"].content.controls.append(control)\n \n     def parse(self):\n-        for item in self.json:\n+        for key,va in self.json:\n                 # the val and the key variables are the keys and values we retrieve from the json file\n                 self.Initialize_Components(\n                     key,\n                     val,\n"
                },
                {
                    "date": 1702567016426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n                 self.keys[f\"{parent}\"].content.controls.append(control)\n \n     def parse(self):\n         for key, val in self.json:\n+            print(key)\n             # the val and the key variables are the keys and values we retrieve from the json file\n             self.Initialize_Components(\n                 key,\n                 val,\n"
                },
                {
                    "date": 1702567027622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n                 self.keys[f\"{key}\"] = control\n                 self.keys[f\"{parent}\"].content.controls.append(control)\n \n     def parse(self):\n-        for key, val in self.json:\n+        for item in self.json:\n             print(key)\n             # the val and the key variables are the keys and values we retrieve from the json file\n             self.Initialize_Components(\n                 key,\n"
                }
            ],
            "date": 1702566579814,
            "name": "Commit-0",
            "content": "import flet as ft\nimport json\n\n# from .initialize_control import Initialize_Components\n\n\nclass Parser:\n    def __init__(self, jsonfilepath=None):\n        if jsonfilepath:\n            with open(jsonfilepath) as f:\n                self.json = json.load(f)\n        # to store all the control names for the user to access\n        self.keys = {}\n\n    def Initialize_Components(self, key, val, parent=None):\n        if val[\"type\"] == \"Container\":\n            # self.keys[f\"{key}\"] = ft.Container()\n            control = ft.Container()\n            control.width = val[\"width\"]\n            control.height = val[\"height\"]\n            control.opacity = val[\"opacity\"]\n            control.bgcolor = val[\"bgcolor\"]\n            control.border_radius = ft.border_radius.all(val[\"border_radius\"])\n            self.padding = val.get(\"padding\")\n            if self.padding is not None:\n                left = val[\"padding\"][\"left\"]\n                right = val[\"padding\"][\"right\"]\n                bottom = val[\"padding\"][\"bottom\"]\n                top = val[\"padding\"][\"top\"]\n                control.padding = ft.padding.only(\n                    left=left, right=right, bottom=bottom, top=top\n                )\n\n            if parent is None:\n                self.keys[f\"{key}\"] = control\n            else:\n                self.keys[f\"{parent}\"].content.controls.append(control)\n\n            if \"content\" in val:\n                if val[\"content\"][\"type\"] == \"Row\":\n                    control.content = ft.Row()\n                if val[\"content\"][\"type\"] == \"Column\":\n                    control.content = ft.Column()\n\n                for item in val[\"content\"][\"controls\"]:\n                    for childKey, childVal in item.items():\n                        self.Initialize_Components(\n                            val=childVal, key=childKey, parent=key\n                        )\n\n                    # Initialize_Components(self, key, val)\n                    # if val[\"controls\"] in val[\"content\"]:\n                    #     print(\"Control\")\n                    # else:\n                    #     print(\"not kut\")\n            else:\n                return None\n\n        if val[\"type\"] == \"IconButton\":\n            control = ft.TextButton()\n            control.width = val[\"width\"]\n            control.height = val[\"height\"]\n            control.bgcolor = val[\"bgcolor\"]\n            control.text = val[\"text\"]\n            control.icon = val[\"icon\"]\n            self.opacity = val.get(\"opacity\")\n            if self.opacity is not None:\n                control.opacity = val[\"opacity\"]\n            if parent is None:\n                self.keys[f\"{key}\"] = control\n            else:\n                control.__dict__[\"isChild\"] = True\n                self.keys[f\"{key}\"] = control\n                self.keys[f\"{parent}\"].content.controls.append(control)\n\n    def parse(self):\n        for item in self.json:\n            for key, val in item.items():\n                # the val and the key variables are the keys and values we retrieve from the json file\n                self.Initialize_Components(\n                    key,\n                    val,\n                )"
        }
    ]
}