{
    "sourceFile": "FletDesigner/UI/Designer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1702479403147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702479408984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n             (self.selected.top or 0) + e.delta_y,\n             0 + 5,\n             full_height - (self.selected.height * 2) - 35,\n         )\n-        print()\n+        print(self.i)\n         self.all_regions.update( # key us tommorow\n             {\n                 self.itemName: {\n                     \"begin_x\": self.new_left,\n"
                },
                {
                    "date": 1702480369403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             (self.selected.top or 0) + e.delta_y,\n             0 + 5,\n             full_height - (self.selected.height * 2) - 35,\n         )\n-        print(self.itemName)\n+        # print(self.itemName)\n         self.all_regions.update(  # key us tommorow\n             {\n                 self.itemName: {\n                     \"begin_x\": self.new_left,\n"
                },
                {
                    "date": 1702483173412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import flet as ft\n+from flet import Container, Row, Column, Text, TextButton, ElevatedButton\n+from ..Parser.parser import ParserEngine\n+import json\n+from ..UI.ToolbarItem import ToolbarItem\n+from ..widgets.widgets import ALL_WIDGETS\n+from ..UI.Interactve_manager import IManager\n+\n+\n+# ft.Draggable()\n+def clamp(n, smallest, largest):\n+    return max(smallest, min(n, largest))\n+\n+\n+class DesignerSection(ft.UserControl):\n+    def __init__(\n+        self, imanager: IManager, project_file_path: str, parser_engine: ParserEngine\n+    ):\n+        self.parser_engine = parser_engine\n+        # self.parser = Parser()\n+        self.IManager = imanager\n+        self.list_file = \"widgets/widgets.json\"\n+        self.all_controls = {}\n+        self.all_regions = {}\n+        self.selected = None\n+        self.itemName = None\n+        self.buttonDown = False\n+        self.outline_width = 3\n+        self.outlineContainer = ft.Container(\n+            border=ft.border.all(color=ft.colors.WHITE, width=self.outline_width),\n+        )\n+        self.control_counter = 1\n+        super().__init__()\n+        self.expand = 3 * 5\n+\n+    def load_control_list(self):\n+        self.supported_widgets = []\n+\n+        self.control_definations = ALL_WIDGETS\n+\n+    def buttonDown1(self, e: ft.TapEvent):\n+        self.buttonDown = True\n+\n+    def show_outline(self):\n+        self.outlineContainer.left = self.selected.left - self.outline_width\n+        self.outlineContainer.top = self.selected.top - self.outline_width\n+        self.outlineContainer.width = self.selected.width + (self.outline_width * 2)\n+        self.outlineContainer.height = self.selected.height + (self.outline_width * 2)\n+        self.outlineContainer.visible = True\n+        self.outlineContainer.update()\n+\n+    def isInRange(self, x, y, region):\n+        if (\n+            (x >= region.get(\"begin_x\"))\n+            and (y >= region.get(\"begin_y\"))\n+            and (x <= region.get(\"end_x\"))\n+            and (y <= region.get(\"end_y\"))\n+        ):\n+            return True\n+        return False\n+\n+    def itemselection(self, e: ft.TapEvent, created_name: str = None):\n+        self.selected = None  # change and update selected\n+        self.outlineContainer.visible = False\n+        self.outlineContainer.update()\n+\n+        if created_name == None:\n+            for name, region in self.all_regions.items():\n+                if self.isInRange(e.local_x, e.local_y, region):\n+                    item = self.all_controls.get(name)\n+                    self.selected = item\n+                    self.itemName = name\n+                    break\n+        else:\n+            name = created_name\n+            item = self.all_controls.get(name)\n+            self.selected = item\n+            self.itemName = name\n+\n+        if self.selected == None:\n+            self.IManager.select(\n+                defualt_properties=self.IManager.defualt_properties, name=\"\"\n+            )\n+            return\n+        self.show_outline()\n+        item_properties = {k: v[0] for k, v in item._Control__attrs.items()}\n+        self.IManager.select(defualt_properties=item_properties, name=name)\n+        return\n+\n+    def on_pan_end(self, e: ft.DragEndEvent):\n+        if self.selected == None:\n+            return\n+\n+        self.show_outline()\n+\n+    def on_pan_update(self, e: ft.DragUpdateEvent, selected):\n+        if self.selected == None:\n+            return\n+        full_width = self.page.window_width * (3 / 5)\n+        full_height = 1290  # self.page.window_height #1290 # issue is here\n+        self.outlineContainer.visible = False\n+        self.outlineContainer.update()\n+        self.new_left = clamp(\n+            (self.selected or selected.left or 0) + e.delta_x,\n+            0 + 5,\n+            full_width - self.selected.width - 5,\n+        )\n+        self.new_top = clamp(\n+            (self.selected.top or selected or 0) + e.delta_y,\n+            0 + 5,\n+            full_height - (self.selected.height or se * 2) - 35,\n+        )\n+        # print(self.itemName)\n+        self.all_regions.update(  # key us tommorow\n+            {\n+                self.itemName: {\n+                    \"begin_x\": self.new_left,\n+                    \"begin_y\": self.new_top,\n+                    \"end_x\": self.new_left + self.selected.width,\n+                    \"end_y\": self.new_top + self.selected.height,\n+                }\n+            }\n+        )\n+        self.selected.left = self.new_left\n+        self.selected.top = self.new_top\n+        self.selected.update()\n+\n+        # Edit & Update the Control Positioning Property via the Parser\n+        self.parser_engine.edit_control_property(\n+            control_uniqe_name=str(self.itemName),\n+            property_name=\"top\",\n+            new_property_value=int(self.new_top),\n+        )\n+\n+        self.parser_engine.edit_control_property(\n+            control_uniqe_name=str(self.itemName),\n+            property_name=\"left\",\n+            new_property_value=int(self.new_left),\n+        )\n+\n+    def accept_draggable(self, e: ft.DragTargetAcceptEvent):\n+        ctrlname = e.page.get_control(e.src_id)\n+        name = ctrlname.content.content.value\n+        control_data = next(\n+            (item for item in self.control_definations if item.get(name)), None\n+        )\n+\n+        if control_data is None:\n+            print(\"Control will be added later\")\n+            return\n+        self.load_control_list()\n+        default_properties = control_data[name][\"default\"]\n+        object = globals()[name]\n+        object = object(**default_properties)\n+\n+        current_control_counter_number = (\n+            self.parser_engine.get_new_control_counter_number()\n+        )\n+        unique_name = f\"container{current_control_counter_number}\"\n+        self.all_controls.update({unique_name: object})\n+        self.all_regions.update(\n+            {\n+                unique_name: {\n+                    \"begin_x\": object.left,\n+                    \"begin_y\": object.top,\n+                    \"end_x\": object.left + object.width,\n+                    \"end_y\": object.top + object.height,\n+                }\n+            }\n+        )\n+        self.main_stack.controls.append(\n+            list(self.all_controls.values())[current_control_counter_number - 1]\n+        )\n+        e.control.update()\n+        self.main_stack.update()\n+        self.itemselection(\"\", unique_name)\n+\n+        # Make The Parser Save This New Control.\n+        self.parser_engine.add_new_control_to_content(\n+            control_uniqe_name=str(unique_name),\n+            control_dict=dict(control_data[name][\"default\"]),\n+            control_class_name=str(name),\n+        )\n+\n+    def build(self):\n+        self.load_control_list()\n+        self.main_stack = ft.Stack(\n+            controls=[\n+                ft.Container(\n+                    expand=True,\n+                    border=ft.border.all(1.9, color=\"#383838\"),\n+                    border_radius=ft.border_radius.all(8),\n+                    bgcolor=ft.colors.BLACK,\n+                ),\n+                self.outlineContainer,\n+            ],\n+            expand=True,\n+        )\n+        self.DesignerSection1 = ft.DragTarget(\n+            group=\"widget\",\n+            on_accept=self.accept_draggable,\n+            content=ft.GestureDetector(\n+                expand=True,\n+                content=self.main_stack,\n+                on_tap_down=self.buttonDown1,\n+                on_pan_update=self.on_pan_update,\n+                on_pan_end=self.on_pan_end,\n+                on_tap_up=self.itemselection,\n+            ),\n+        )\n+\n+        # Load the saved control to the deigner\n+        self.parser_engine.load_content(designer_section_class=self)\n+\n+        return self.DesignerSection1\n+\n+    def add_control_to_designer(self, control):\n+        pass\n"
                }
            ],
            "date": 1702479403147,
            "name": "Commit-0",
            "content": "import flet as ft\nfrom flet import Container, Row, Column, Text, TextButton, ElevatedButton\nfrom ..Parser.parser import ParserEngine\nimport json\nfrom ..UI.ToolbarItem import ToolbarItem\nfrom ..widgets.widgets import ALL_WIDGETS\nfrom ..UI.Interactve_manager import IManager\n\n\n# ft.Draggable()\ndef clamp(n, smallest, largest):\n    return max(smallest, min(n, largest))\n\n\nclass DesignerSection(ft.UserControl):\n    def __init__(self, imanager: IManager, project_file_path:str, parser_engine:ParserEngine):\n        self.parser_engine = parser_engine\n        # self.parser = Parser()\n        self.IManager = imanager\n        self.list_file = \"widgets/widgets.json\"\n        self.all_controls = {}\n        self.all_regions = {}\n        self.selected = None\n        self.itemName = None\n        self.buttonDown = False\n        self.outline_width = 3\n        self.outlineContainer = ft.Container(\n            border=ft.border.all(color=ft.colors.WHITE, width=self.outline_width),\n        )\n        self.control_counter = 1\n        super().__init__()\n        self.expand = 3*5\n\n    def load_control_list(self):\n        self.supported_widgets = []\n        \n        self.control_definations = ALL_WIDGETS\n\n    def buttonDown1(self, e: ft.TapEvent):\n        self.buttonDown = True\n\n    def show_outline(self):\n        self.outlineContainer.left = self.selected.left - self.outline_width\n        self.outlineContainer.top = self.selected.top - self.outline_width\n        self.outlineContainer.width = self.selected.width + (self.outline_width * 2)\n        self.outlineContainer.height = self.selected.height + (self.outline_width * 2)\n        self.outlineContainer.visible = True\n        self.outlineContainer.update()\n\n    def isInRange(self, x, y, region):\n        if (\n            (x >= region.get(\"begin_x\"))\n            and (y >= region.get(\"begin_y\"))\n            and (x <= region.get(\"end_x\"))\n            and (y <= region.get(\"end_y\"))\n        ):\n            return True\n        return False\n\n    def itemselection(self, e: ft.TapEvent, created_name: str= None):\n        self.selected = None # change and update selected\n        self.outlineContainer.visible = False\n        self.outlineContainer.update()\n\n        if created_name == None:\n            for name, region in self.all_regions.items():\n                if self.isInRange(e.local_x, e.local_y, region):\n                    item = self.all_controls.get(name)\n                    self.selected = item\n                    self.itemName = name\n                    break\n        else:\n            name = created_name\n            item = self.all_controls.get(name)\n            self.selected = item\n            self.itemName = name\n        \n        if self.selected == None:\n            self.IManager.select(defualt_properties= self.IManager.defualt_properties,name= \"\")\n            return\n        self.show_outline()\n        item_properties = {k:v[0] for k,v in item._Control__attrs.items()}\n        self.IManager.select(defualt_properties = item_properties, name= name)\n        return\n\n    def on_pan_end(self, e: ft.DragEndEvent):\n        if self.selected == None:\n            return\n        \n        self.show_outline()\n\n    def on_pan_update(self, e: ft.DragUpdateEvent):\n        if self.selected == None:\n            return\n        full_width = self.page.window_width * (3/5)\n        full_height = 1290 #self.page.window_height #1290 # issue is here \n        self.outlineContainer.visible = False\n        self.outlineContainer.update()\n        self.new_left = clamp(\n            (self.selected.left or 0) + e.delta_x,\n            0 + 5,\n            full_width - self.selected.width - 5,\n        )\n        self.new_top = clamp(\n            (self.selected.top or 0) + e.delta_y,\n            0 + 5,\n            full_height - (self.selected.height * 2) - 35,\n        )\n        print()\n        self.all_regions.update( # key us tommorow\n            {\n                self.itemName: {\n                    \"begin_x\": self.new_left,\n                    \"begin_y\": self.new_top,\n                    \"end_x\": self.new_left + self.selected.width,\n                    \"end_y\": self.new_top + self.selected.height,\n                }\n            }\n        )\n        self.selected.left = self.new_left\n        self.selected.top = self.new_top\n        self.selected.update()\n\n        # Edit & Update the Control Positioning Property via the Parser\n        self.parser_engine.edit_control_property(\n            control_uniqe_name=str(self.itemName),\n            property_name=\"top\",\n            new_property_value=int(self.new_top)\n        )\n\n        self.parser_engine.edit_control_property(\n            control_uniqe_name=str(self.itemName),\n            property_name=\"left\",\n            new_property_value=int(self.new_left)\n        )\n\n    def accept_draggable(self, e: ft.DragTargetAcceptEvent):\n        ctrlname = e.page.get_control(e.src_id)\n        name = ctrlname.content.content.value\n        control_data = next(\n            (item for item in self.control_definations if item.get(name)), None\n        )\n\n        if control_data is None:\n            print(\"Control will be added later\")\n            return\n        self.load_control_list()\n        default_properties = control_data[name][\"default\"]\n        object = globals()[name]\n        object = object(**default_properties)\n\n        current_control_counter_number = self.parser_engine.get_new_control_counter_number()\n        unique_name = f\"container{current_control_counter_number}\"\n        self.all_controls.update({unique_name: object})\n        self.all_regions.update(\n            {\n                unique_name: {\n                    \"begin_x\": object.left,\n                    \"begin_y\": object.top,\n                    \"end_x\": object.left + object.width,\n                    \"end_y\": object.top + object.height,\n                }\n            }\n        )\n        self.main_stack.controls.append(\n            list(self.all_controls.values())[current_control_counter_number-1]\n        )\n        e.control.update()\n        self.main_stack.update()\n        self.itemselection('', unique_name)\n\n        # Make The Parser Save This New Control.\n        self.parser_engine.add_new_control_to_content(\n            control_uniqe_name=str(unique_name),\n            control_dict=dict(control_data[name][\"default\"]),\n            control_class_name=str(name)\n        )\n\n    def build(self):\n        self.load_control_list()\n        self.main_stack = ft.Stack(\n            controls=[\n                ft.Container(\n                    expand= True,\n                    border=ft.border.all(1.9, color=\"#383838\"),\n                    border_radius=ft.border_radius.all(8),\n                    bgcolor=ft.colors.BLACK,\n                ),\n                self.outlineContainer,\n            ],\n            expand= True,\n        )\n        self.DesignerSection1 = ft.DragTarget(\n            group=\"widget\",\n            on_accept=self.accept_draggable,\n            content=ft.GestureDetector(\n                expand= True,\n                content=self.main_stack,\n                on_tap_down=self.buttonDown1,\n                on_pan_update=self.on_pan_update,\n                on_pan_end=self.on_pan_end,\n                on_tap_up=self.itemselection,\n            ),\n        )\n\n        # Load the saved control to the deigner\n        self.parser_engine.load_content(designer_section_class=self)\n\n\n        return self.DesignerSection1\n\n\n    def add_control_to_designer (self, control):\n        pass"
        }
    ]
}