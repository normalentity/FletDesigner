{
    "sourceFile": "FletDesigner/UI/Properties_Toolbar.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1701511591447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702490995992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,532 @@\n+import multiprocessing\n+import flet as ft\n+from ..ColorPicker.color_picker import ColorPicker\n+\n+# ft.Dis\n+\n+\n+# ft.SweepGradient()\n+ft.Container()\n+\n+\n+class PropertiesToolbar(ft.UserControl):\n+    def __init__(self, page, manager, parser_engine):\n+        self.page = page\n+        super().__init__()\n+        self.imanager = manager\n+        self.parser_engine = parser_engine\n+        self.expand = int((1 + 0.2) * 5)\n+\n+    def on_change(self, e):\n+        self.selection_value = e.control.value\n+        if self.selection_value == \"LinearGradient\":\n+            pass\n+    \n+    def on_update_control_property (self, control_unique_name:str, property_name:str, property_value:str):\n+        self\n+\n+\n+    def open_alert_dlg(self, e):\n+        self.page.dialog = self.color_picker_modal\n+        self.color_picker_modal.open = True\n+        self.page.update()\n+\n+    def open_alert_dlg1(self, e):\n+        self.page.dialog = self.color_picker_modal1\n+        self.color_picker_modal1.open = True\n+        self.page.update()\n+\n+    def open_alert_dlg2(self, e):\n+        self.page.dialog = self.color_picker_modal2\n+        self.color_picker_modal2.open = True\n+        self.page.update()\n+\n+    def use_color(self, e):\n+        self.color_holder.bgcolor = self.color_picker.color\n+        self.hex_holder.content.value = self.color_picker.color\n+        self.imanager.change_property('-c', self.color_picker.color)\n+        self.color_holder.update()\n+        self.hex_holder.content.update()\n+        self.color_picker_modal.open = False\n+        self.color_holder.update()\n+        self.page.update()\n+\n+    def use_color_gradient(self, e):\n+        self.gradient_color_holder.bgcolor = self.color_picker1.color\n+        self.gradient_hex_holder.content.value = self.color_picker1.color\n+        self.gradient_color_holder.update()\n+        self.gradient_hex_holder.content.update()\n+        self.color_picker_modal1.open = False\n+        self.gradient_color_holder.update()\n+        self.page.update()\n+\n+    def use_color_gradient1(self, e):\n+        self.gradient_color_holder1.bgcolor = self.color_picker2.color\n+        self.gradient_hex_holder1.content.value = self.color_picker2.color\n+        self.gradient_color_holder1.update()\n+        self.gradient_hex_holder1.content.update()\n+        self.color_picker_modal2.open = False\n+        self.gradient_color_holder1.update()\n+        self.page.update()\n+\n+    def close_dlg(self, e):\n+        self.color_picker_modal.open = False\n+        self.page.update()\n+\n+    def close_dlg1(self, e):\n+        self.color_picker_modal1.open = False\n+        self.page.update()\n+\n+    def close_dlg2(self, e):\n+        self.color_picker_modal2.open = False\n+        self.page.update()\n+\n+    def change(self, e: ft.ControlEvent, prop):\n+        # add code to check and not allow for alphabets and soon\n+        self.imanager.change_property(prop, e.control.value)\n+\n+    def build(self):\n+        # (existing build code)\n+\n+        self.propertiesContainer = ft.Container(\n+            height=1200,\n+            bgcolor=ft.colors.with_opacity(opacity=0.6, color=ft.colors.BLACK45),\n+            border_radius=ft.border_radius.all(15),\n+        )\n+\n+        self.propertiesColumn = ft.Column(scroll=\"always\")\n+\n+        heading = ft.Container(\n+            margin=ft.margin.only(top=10),\n+            alignment=ft.alignment.center,\n+            content=ft.Text(value=\"Properties\", size=20),\n+        )\n+        \n+        # tight=True,\n+        # spacing=1,\n+        heading_beign = ft.Container( # Be more specific \n+            margin=ft.margin.all(10),\n+            content=ft.Text(value=\"Begin\", size=15),\n+            )\n+        heading_end = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Text(value=\"End\", size=15),\n+            )\n+        \n+        self.color_holder = ft.Container(\n+            width=20,\n+            height=20,\n+            bgcolor=ft.colors.RED,\n+            border_radius=5,\n+            margin=ft.margin.only(left=10),\n+            on_click=self.open_alert_dlg,\n+            # ink=True,\n+        )\n+        self.gradient_color_holder = ft.Container(\n+            width=20,\n+            height=20,\n+            bgcolor=ft.colors.RED,\n+            border_radius=5,\n+            margin=ft.margin.only(left=10),\n+            on_click=self.open_alert_dlg1,\n+            # ink=True,\n+        )\n+        self.gradient_color_holder1 = ft.Container(\n+            width=20,\n+            height=20,\n+            bgcolor=ft.colors.RED,\n+            border_radius=5,\n+            margin=ft.margin.only(left=10),\n+            on_click=self.open_alert_dlg2,\n+            # ink=True,\n+        )\n+\n+        self.color_picker = ColorPicker(color=\"#c8df6f\", width=300)\n+        self.color_picker1 = ColorPicker(color=\"#c8df6f\", width=300)\n+        self.color_picker2 = ColorPicker(color=\"#c8df6f\", width=300)\n+        self.color_picker_modal = ft.AlertDialog(\n+            shape=ft.RoundedRectangleBorder(radius=6),\n+            content=self.color_picker,\n+            actions=[\n+                ft.Container(\n+                    width=90,\n+                    height=36,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.WHITE30,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.close_dlg,\n+                    content=ft.Text(\"Cancel\", size=16),\n+                ),\n+                ft.Container(\n+                    width=90,\n+                    height=38,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.BLACK,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.use_color,\n+                    content=ft.Text(\"Use Color\", size=16),\n+                ),\n+            ],\n+            actions_alignment=ft.MainAxisAlignment.END,\n+        )\n+        self.color_picker_modal1 = ft.AlertDialog(\n+            shape=ft.RoundedRectangleBorder(radius=6),\n+            content=self.color_picker1,\n+            actions=[\n+                ft.Container(\n+                    width=90,\n+                    height=36,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.WHITE30,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.close_dlg1,\n+                    content=ft.Text(\"Cancel\", size=16),\n+                ),\n+                ft.Container(\n+                    width=90,\n+                    height=38,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.BLACK,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.use_color_gradient,\n+                    content=ft.Text(\"Use Color\", size=16),\n+                ),\n+            ],\n+            actions_alignment=ft.MainAxisAlignment.END,\n+        )\n+        self.color_picker_modal2 = ft.AlertDialog(\n+            shape=ft.RoundedRectangleBorder(radius=6),\n+            content=self.color_picker2,\n+            actions=[\n+                ft.Container(\n+                    width=90,\n+                    height=36,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.WHITE30,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.close_dlg2,\n+                    content=ft.Text(\"Cancel\", size=16),\n+                ),\n+                ft.Container(\n+                    width=90,\n+                    height=38,\n+                    # margin=ft.margin.only(top=130),\n+                    bgcolor=ft.colors.BLACK,\n+                    alignment=ft.alignment.center,\n+                    border_radius=8,\n+                    ink=True,\n+                    on_click=self.use_color_gradient1,\n+                    content=ft.Text(\"Use Color\", size=16),\n+                ),\n+            ],\n+            actions_alignment=ft.MainAxisAlignment.END,\n+        )\n+\n+        self.gradient_hex_holder = ft.Container(\n+            content=ft.Text(value=\"#ff0000\", size=16)\n+        )\n+        self.gradient_hex_holder1 = ft.Container(\n+            content=ft.Text(value=\"#ff0000\", size=16)\n+        )\n+        self.hex_holder = ft.Container(content=ft.Text(value=\"#ff0000\", size=16))\n+        \n+\n+        self.gradient_color_box = ft.Container(\n+            content=ft.Container(\n+                width=140,\n+                height=30,\n+                bgcolor=ft.colors.GREY_800,\n+                border_radius=7,\n+                content=ft.Row(\n+                    controls=[self.gradient_color_holder, self.gradient_hex_holder]\n+                ),\n+            )\n+        )\n+        self.gradient_color_box1 = ft.Container(\n+            content=ft.Container(\n+                width=140,\n+                height=30,\n+                bgcolor=ft.colors.GREY_800,\n+                border_radius=7,\n+                content=ft.Row(\n+                    controls=[self.gradient_color_holder1, self.gradient_hex_holder1]\n+                ),\n+            )\n+        )\n+\n+        self.control_rotation = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                label=\"Rotation\",\n+                width=120,\n+                height=40,\n+            ),\n+        )\n+ \n+        self.gradient = ft.Container(\n+            content=ft.Dropdown(\n+                width=170,\n+                autofocus=False,\n+                border_color=\"black\",\n+                border=ft.border.all(color=\"black\", width=1),\n+                hint_text=\"Choose Gradient Type\",\n+                options=[\n+                    ft.dropdown.Option(key=\"LinearGradient\"),\n+                    ft.dropdown.Option(key=\"RadialGradient\"),\n+                    ft.dropdown.Option(key=\"SweepGradient\"),\n+                ],\n+                on_change=self.on_change,\n+            ),\n+        )\n+\n+        self.choose_begin = ft.Container(\n+            content=ft.Dropdown(\n+                width=170,\n+                autofocus=False,\n+                border_color=\"black\",\n+                border=ft.border.all(color=\"black\", width=1),\n+                hint_text=\"Choose Begin\",\n+                options=[\n+                    ft.dropdown.Option(key=\"center\"),\n+                    ft.dropdown.Option(key=\"center_left\"),\n+                    ft.dropdown.Option(key=\"center_right\"),\n+                    ft.dropdown.Option(key=\"bottom_center\"),\n+                    ft.dropdown.Option(key=\"bottom_left\"),\n+                    ft.dropdown.Option(key=\"bottom_right\"),\n+                    ft.dropdown.Option(key=\"top_center\"),\n+                    ft.dropdown.Option(key=\"top_right\"),\n+                    ft.dropdown.Option(key=\"top_left\"),\n+                ],\n+                on_change=self.on_change,\n+            ),\n+        )\n+        self.choose_end = ft.Container(\n+            content=ft.Dropdown(\n+                width=170,\n+                autofocus=False,\n+                border_color=\"black\",\n+                border=ft.border.all(color=\"black\", width=1),\n+                hint_text=\"Choose End\",\n+                options=[\n+                    ft.dropdown.Option(key=\"center\"),\n+                    ft.dropdown.Option(key=\"center_left\"),\n+                    ft.dropdown.Option(key=\"center_right\"),\n+                    ft.dropdown.Option(key=\"bottom_center\"),\n+                    ft.dropdown.Option(key=\"bottom_left\"),\n+                    ft.dropdown.Option(key=\"bottom_right\"),\n+                    ft.dropdown.Option(key=\"top_center\"),\n+                    ft.dropdown.Option(key=\"top_right\"),\n+                    ft.dropdown.Option(key=\"top_left\"),\n+                ],\n+                on_change=self.on_change,\n+            ),\n+        )\n+\n+        \n+        ft.Column()\n+\n+        self.control_name_space = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                hint_text= \"Add Name\",\n+                border= ft.InputBorder.UNDERLINE\n+            ),\n+        )\n+        self.control_width = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                width=140,\n+                hint_text= \"Add Width\",\n+                border= ft.InputBorder.UNDERLINE,\n+                on_change= lambda e: self.change(e, \"-w\")\n+            ),\n+        )\n+        self.control_height = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                width=140,\n+                hint_text= \"Add Height\",\n+                border= ft.InputBorder.UNDERLINE,\n+                on_change= lambda e: self.change(e, \"-h\")\n+            ),\n+        )\n+        self.control_opacity = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                width=140,\n+                hint_text= \"Add Opacity\",\n+                border= ft.InputBorder.UNDERLINE,\n+                # ,\n+                on_change= lambda e: self.change(e, \"-o\")\n+            ),\n+        )\n+        self.color_box = ft.Container( # why does it have two containers\n+            content=ft.Container(\n+                width=140,\n+                height=30,\n+                bgcolor=ft.colors.GREY_800,\n+                border_radius=7,\n+                content=ft.Row(controls=[self.color_holder, self.hex_holder]),\n+            )\n+        )\n+        self.cover_component = ft.Container(\n+            width=460,\n+            border=ft.border.all(width=2, color=\"cyan\"),\n+            height=400,\n+            padding= ft.padding.all(10),\n+            content=ft.Column(\n+                spacing= 0,\n+                controls=[\n+                    ft.Row(\n+                        wrap= True,\n+                        controls=[\n+                            self.gradient,\n+                            self.control_rotation,\n+                        ],\n+                        alignment= ft.MainAxisAlignment.SPACE_BETWEEN,\n+                    ),\n+                    heading_beign, # Be more specific with the naming\n+                    ft.Row(\n+                        wrap= True,\n+                        controls=[\n+                            self.gradient_color_box,\n+                            self.choose_begin,\n+                            \n+                        ]\n+                    ),\n+                    heading_end,\n+                    ft.Row(\n+                        wrap= True,\n+                        controls=[\n+                            self.gradient_color_box1,\n+                            self.choose_end,\n+                            \n+                        ]\n+                    )\n+                ],\n+                scroll=\"always\",\n+            ),\n+            border_radius=5,\n+        )\n+        \n+        heading_Control_name = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 0,\n+                controls=[\n+                    ft.Text(value=\"Control Name\", size=15),\n+                    self.control_name_space,\n+                ]\n+            ),\n+        )\n+        \n+        heading_width = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 0,\n+                controls=[\n+                    ft.Text(value=\"Width\", size=15),\n+                    self.control_width,\n+                ]\n+            ),\n+        )\n+        heading_height = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 0,\n+                controls=[\n+                    ft.Text(value=\"Height\", size=15),\n+                    self.control_height,\n+                ]\n+            ),\n+        )\n+        heading_opacity = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 0,\n+                controls=[\n+                    ft.Text(value=\"Opacity\", size=15),\n+                    self.control_opacity,\n+                ]\n+            ),\n+        )\n+        \n+        heading_color = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 5,\n+                controls=[\n+                    ft.Text(value=\"Color\", size=15),\n+                    self.color_box,\n+                ]\n+            ),\n+        )\n+        heading_gradient = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing= 5,\n+                controls=[\n+                    ft.Text(value=\"Gradient\", size=15),\n+                    self.cover_component,\n+                ]\n+            ),\n+        )\n+        \n+        # can use a for loop instead to reduce redundancy\n+        heading_grid = ft.GridView(\n+            max_extent= 150,\n+            child_aspect_ratio= 1.5,\n+            controls=[\n+                heading_height,\n+                heading_width,\n+                heading_opacity,\n+            ]\n+        )\n+\n+        self.propertiesColumn.controls = [\n+            heading,\n+            heading_Control_name,\n+            heading_grid,\n+            heading_color,\n+            heading_gradient,\n+        ]\n+\n+        self.propertiesContainer.content = self.propertiesColumn\n+\n+        return self.propertiesContainer\n+\n+\n+def init_process():\n+    # Code to initialize each process if needed\n+    pass\n+\n+\n+def build_and_run(page):\n+    properties_toolbar = PropertiesToolbar(page)\n+    properties_container = properties_toolbar.build()\n+\n+    # Additional code to set up the rest of your application\n+\n+    # ft.run(page)\n+\n+\n+if __name__ == \"__main__\":\n+    # Create a multiprocessing.Pool\n+    with multiprocessing.Pool(\n+        processes=multiprocessing.cpu_count(), initializer=init_process\n+    ) as pool:\n+        # Create a page for each process\n+        pages = [ft.Page() for _ in range(pool._processes)]\n+\n+        # Use multiprocessing.Pool to run the build_and_run function for each process\n+        pool.map(build_and_run, pages)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1702491007076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         if self.selection_value == \"LinearGradient\":\n             pass\n     \n     def on_update_control_property (self, control_unique_name:str, property_name:str, property_value:str):\n-        self\n+        \n \n \n     def open_alert_dlg(self, e):\n         self.page.dialog = self.color_picker_modal\n@@ -528,539 +528,5 @@\n         # Create a page for each process\n         pages = [ft.Page() for _ in range(pool._processes)]\n \n         # Use multiprocessing.Pool to run the build_and_run function for each process\n-        pool.map(build_and_run, pages)\n-import multiprocessing\n-import flet as ft\n-from ..ColorPicker.color_picker import ColorPicker\n-\n-# ft.Dis\n-\n-\n-# ft.SweepGradient()\n-ft.Container()\n-\n-\n-class PropertiesToolbar(ft.UserControl):\n-    def __init__(self, page,):\n-        self.page = page\n-        super().__init__()\n-        self.expand = int((1 + 0.2) * 5)\n-\n-    def on_change(self, e):\n-        self.selection_value = e.control.value\n-        if self.selection_value == \"LinearGradient\":\n-            pass\n-\n-    def open_alert_dlg(self, e):\n-        self.page.dialog = self.color_picker_modal\n-        self.color_picker_modal.open = True\n-        self.page.update()\n-\n-    def open_alert_dlg1(self, e):\n-        self.page.dialog = self.color_picker_modal1\n-        self.color_picker_modal1.open = True\n-        self.page.update()\n-\n-    def open_alert_dlg2(self, e):\n-        self.page.dialog = self.color_picker_modal2\n-        self.color_picker_modal2.open = True\n-        self.page.update()\n-\n-    def use_color(self, e):\n-        self.color_holder.bgcolor = self.color_picker.color\n-        self.hex_holder.content.value = self.color_picker.color\n-        self.color_holder.update()\n-        self.hex_holder.content.update()\n-        self.color_picker_modal.open = False\n-        self.color_holder.update()\n-        self.page.update()\n-\n-    def use_color_gradient(self, e):\n-        self.gradient_color_holder.bgcolor = self.color_picker1.color\n-        self.gradient_hex_holder.content.value = self.color_picker1.color\n-        self.gradient_color_holder.update()\n-        self.gradient_hex_holder.content.update()\n-        self.color_picker_modal1.open = False\n-        self.gradient_color_holder.update()\n-        self.page.update()\n-\n-    def use_color_gradient1(self, e):\n-        self.gradient_color_holder1.bgcolor = self.color_picker2.color\n-        self.gradient_hex_holder1.content.value = self.color_picker2.color\n-        self.gradient_color_holder1.update()\n-        self.gradient_hex_holder1.content.update()\n-        self.color_picker_modal2.open = False\n-        self.gradient_color_holder1.update()\n-        self.page.update()\n-\n-    def close_dlg(self, e):\n-        self.color_picker_modal.open = False\n-        self.page.update()\n-\n-    def close_dlg1(self, e):\n-        self.color_picker_modal1.open = False\n-        self.page.update()\n-\n-    def close_dlg2(self, e):\n-        self.color_picker_modal2.open = False\n-        self.page.update()\n-\n-    def build(self):\n-        # (existing build code)\n-\n-        self.propertiesContainer = ft.Container(\n-            # width=((2.5 / 10) * self.window_width),\n-            height=1200,\n-            bgcolor=ft.colors.with_opacity(opacity=0.6, color=ft.colors.BLACK45),\n-            border_radius=ft.border_radius.all(15),\n-            # padding=ft.padding.only(left=15, right=15, top=30),\n-        )\n-\n-        self.propertiesColumn = ft.Column(controls=[ft.Stack()], scroll=\"always\")\n-\n-        heading = ft.Container(\n-            margin=ft.margin.only(top=10),\n-            alignment=ft.alignment.center,\n-            content=ft.Text(value=\"Properties\", size=20),\n-        )\n-        heading_Control_name = ft.Container(\n-            margin=ft.margin.only(top=60, left=10),\n-            content=ft.Row(\n-                controls=[\n-                    ft.Text(value=\"Control Name\", size=15),\n-                ]\n-            ),\n-        )\n-        # tight=True,\n-\n-        heading_width = ft.Row(\n-            controls=[\n-                ft.Container(\n-                    margin=ft.margin.only(left=160, top=155),\n-                    content=ft.Row(\n-                        controls=[\n-                            ft.Text(value=\"Width\", size=15),\n-                        ]\n-                    ),\n-                )\n-            ],\n-        )\n-\n-        heading_height = ft.Container(\n-            margin=ft.margin.only(top=155, left=10),\n-            content=ft.Row(\n-                controls=[\n-                    ft.Text(value=\"Height\", size=15),\n-                ]\n-            ),\n-        )\n-\n-        # spacing=1,\n-\n-        heading_color = ft.Row(\n-            # spacing=1,\n-            controls=[\n-                ft.Container(\n-                    margin=ft.margin.only(top=260, left=10),\n-                    content=ft.Text(value=\"Color\", size=15),\n-                )\n-            ],\n-        )\n-        heading_gradient = ft.Row(\n-            # spacing=1,\n-            alignment=ft.alignment.center,\n-            controls=[\n-                ft.Container(\n-                    margin=ft.margin.only(top=330, left=10),\n-                    content=ft.Text(value=\"Gradient\", size=15),\n-                    alignment=ft.alignment.center,\n-                )\n-            ],\n-        )\n-        heading_beign = ft.Row(\n-            # spacing=1,\n-            controls=[\n-                ft.Container(\n-                    margin=ft.margin.only(top=75, left=200),\n-                    content=ft.Text(value=\"Begin\", size=16),\n-                )\n-            ],\n-        )\n-        heading_end = ft.Row(\n-            # spacing=1,\n-            controls=[\n-                ft.Container(\n-                    margin=ft.margin.only(top=140, left=200),\n-                    content=ft.Text(value=\"End\", size=16),\n-                )\n-            ],\n-        )\n-        self.color_holder = ft.Container(\n-            width=20,\n-            height=20,\n-            bgcolor=ft.colors.RED,\n-            border_radius=5,\n-            margin=ft.margin.only(left=10),\n-            on_click=self.open_alert_dlg,\n-            # ink=True,\n-        )\n-        self.gradient_color_holder = ft.Container(\n-            width=20,\n-            height=20,\n-            bgcolor=ft.colors.RED,\n-            border_radius=5,\n-            margin=ft.margin.only(left=10),\n-            on_click=self.open_alert_dlg1,\n-            # ink=True,\n-        )\n-        self.gradient_color_holder1 = ft.Container(\n-            width=20,\n-            height=20,\n-            bgcolor=ft.colors.RED,\n-            border_radius=5,\n-            margin=ft.margin.only(left=10),\n-            on_click=self.open_alert_dlg2,\n-            # ink=True,\n-        )\n-\n-        self.color_picker = ColorPicker(color=\"#c8df6f\", width=300)\n-        self.color_picker1 = ColorPicker(color=\"#c8df6f\", width=300)\n-        self.color_picker2 = ColorPicker(color=\"#c8df6f\", width=300)\n-        self.color_picker_modal = ft.AlertDialog(\n-            shape=ft.RoundedRectangleBorder(radius=6),\n-            content=self.color_picker,\n-            actions=[\n-                ft.Container(\n-                    width=90,\n-                    height=36,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.WHITE30,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.close_dlg,\n-                    content=ft.Text(\"Cancel\", size=16),\n-                ),\n-                ft.Container(\n-                    width=90,\n-                    height=38,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.BLACK,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.use_color,\n-                    content=ft.Text(\"Use Color\", size=16),\n-                ),\n-            ],\n-            actions_alignment=ft.MainAxisAlignment.END,\n-        )\n-        self.color_picker_modal1 = ft.AlertDialog(\n-            shape=ft.RoundedRectangleBorder(radius=6),\n-            content=self.color_picker1,\n-            actions=[\n-                ft.Container(\n-                    width=90,\n-                    height=36,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.WHITE30,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.close_dlg1,\n-                    content=ft.Text(\"Cancel\", size=16),\n-                ),\n-                ft.Container(\n-                    width=90,\n-                    height=38,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.BLACK,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.use_color_gradient,\n-                    content=ft.Text(\"Use Color\", size=16),\n-                ),\n-            ],\n-            actions_alignment=ft.MainAxisAlignment.END,\n-        )\n-        self.color_picker_modal2 = ft.AlertDialog(\n-            shape=ft.RoundedRectangleBorder(radius=6),\n-            content=self.color_picker2,\n-            actions=[\n-                ft.Container(\n-                    width=90,\n-                    height=36,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.WHITE30,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.close_dlg2,\n-                    content=ft.Text(\"Cancel\", size=16),\n-                ),\n-                ft.Container(\n-                    width=90,\n-                    height=38,\n-                    # margin=ft.margin.only(top=130),\n-                    bgcolor=ft.colors.BLACK,\n-                    alignment=ft.alignment.center,\n-                    border_radius=8,\n-                    ink=True,\n-                    on_click=self.use_color_gradient1,\n-                    content=ft.Text(\"Use Color\", size=16),\n-                ),\n-            ],\n-            actions_alignment=ft.MainAxisAlignment.END,\n-        )\n-\n-        self.gradient_hex_holder = ft.Container(\n-            content=ft.Text(value=\"#ff0000\", size=16)\n-        )\n-        self.gradient_hex_holder1 = ft.Container(\n-            content=ft.Text(value=\"#ff0000\", size=16)\n-        )\n-        self.hex_holder = ft.Container(content=ft.Text(value=\"#ff0000\", size=16))\n-        self.color_box = ft.Container(\n-            content=ft.Container(\n-                width=140,\n-                height=30,\n-                bgcolor=ft.colors.GREY_800,\n-                # margin=ft.margin.only(left=10, top=290),\n-                border_radius=7,\n-                content=ft.Row(controls=[self.color_holder, self.hex_holder]),\n-                margin=ft.margin.only(left=10, top=290),\n-            )\n-        )\n-\n-        self.gradient_color_box = ft.Container(\n-            content=ft.Container(\n-                width=140,\n-                height=30,\n-                bgcolor=ft.colors.GREY_800,\n-                # margin=ft.margin.only(left=10, top=290),\n-                border_radius=7,\n-                content=ft.Row(\n-                    controls=[self.gradient_color_holder, self.gradient_hex_holder]\n-                ),\n-                margin=ft.margin.only(left=10, top=75),\n-            )\n-        )\n-        self.gradient_color_box1 = ft.Container(\n-            content=ft.Container(\n-                width=140,\n-                height=30,\n-                bgcolor=ft.colors.GREY_800,\n-                # margin=ft.margin.only(left=10, top=290),\n-                border_radius=7,\n-                content=ft.Row(\n-                    controls=[self.gradient_color_holder1, self.gradient_hex_holder1]\n-                ),\n-                margin=ft.margin.only(left=10, top=140),\n-            )\n-        )\n-\n-        self.control_name_space = ft.Container(\n-            content=ft.TextField(\n-                text_align=ft.alignment.center,\n-                # content_padding=ft.padding.only(left=5, right=80),\n-                # label=\"Control Name\",\n-                width=380,\n-                hint_text= \"Add Name\",\n-                border= ft.InputBorder.UNDERLINE\n-            ),\n-            margin=ft.margin.only(left=10, top=90),\n-        )\n-        self.control_rotation = ft.Container(\n-            content=ft.TextField(\n-                text_align=ft.alignment.center,\n-                # content_padding=ft.padding.only(left=5, right=80),\n-                label=\"Rotation\",\n-                width=120,\n-                height=40,\n-            ),\n-            margin=ft.margin.only(left=310, top=10),\n-        )\n-\n-        self.control_width = ft.Container(\n-            content=ft.TextField(\n-                text_align=ft.alignment.center,\n-                width=140,\n-                # content_padding=ft.padding.only(left=5, right=5),\n-                hint_text= \"Add Width\",\n-                border= ft.InputBorder.UNDERLINE\n-                o\n-            ),\n-            margin=ft.margin.only(left=160, top=185),\n-        )\n-\n-        self.gradient = ft.Container(\n-            margin=ft.margin.only(top=10, left=10),\n-            content=ft.Dropdown(\n-                width=170,\n-                autofocus=False,\n-                border_color=\"black\",\n-                border=ft.border.all(color=\"black\", width=1),\n-                hint_text=\"Choose Gradient Type\",\n-                options=[\n-                    ft.dropdown.Option(key=\"LinearGradient\"),\n-                    ft.dropdown.Option(key=\"RadialGradient\"),\n-                    ft.dropdown.Option(key=\"SweepGradient\"),\n-                ],\n-                on_change=self.on_change,\n-            ),\n-        )\n-\n-        self.choose_begin = ft.Container(\n-            margin=ft.margin.only(top=60, left=270),\n-            content=ft.Dropdown(\n-                width=170,\n-                autofocus=False,\n-                border_color=\"black\",\n-                border=ft.border.all(color=\"black\", width=1),\n-                hint_text=\"Choose Begin\",\n-                options=[\n-                    ft.dropdown.Option(key=\"center\"),\n-                    ft.dropdown.Option(key=\"center_left\"),\n-                    ft.dropdown.Option(key=\"center_right\"),\n-                    ft.dropdown.Option(key=\"bottom_center\"),\n-                    ft.dropdown.Option(key=\"bottom_left\"),\n-                    ft.dropdown.Option(key=\"bottom_right\"),\n-                    ft.dropdown.Option(key=\"top_center\"),\n-                    ft.dropdown.Option(key=\"top_right\"),\n-                    ft.dropdown.Option(key=\"top_left\"),\n-                ],\n-                on_change=self.on_change,\n-            ),\n-        )\n-        self.choose_end = ft.Container(\n-            margin=ft.margin.only(top=140, left=270),\n-            content=ft.Dropdown(\n-                width=170,\n-                autofocus=False,\n-                border_color=\"black\",\n-                border=ft.border.all(color=\"black\", width=1),\n-                hint_text=\"Choose End\",\n-                options=[\n-                    ft.dropdown.Option(key=\"center\"),\n-                    ft.dropdown.Option(key=\"center_left\"),\n-                    ft.dropdown.Option(key=\"center_right\"),\n-                    ft.dropdown.Option(key=\"bottom_center\"),\n-                    ft.dropdown.Option(key=\"bottom_left\"),\n-                    ft.dropdown.Option(key=\"bottom_right\"),\n-                    ft.dropdown.Option(key=\"top_center\"),\n-                    ft.dropdown.Option(key=\"top_right\"),\n-                    ft.dropdown.Option(key=\"top_left\"),\n-                ],\n-                on_change=self.on_change,\n-            ),\n-        )\n-\n-        # print(self.gradient.content.options[1])\n-\n-        self.control_opacity = ft.Container(\n-            content=ft.TextField(\n-                text_align=ft.alignment.center,\n-                width=140,\n-                # content_padding=ft.padding.only(left=5, right=5),\n-                hint_text= \"Add Opacity\",\n-                border= ft.InputBorder.UNDERLINE\n-            ),\n-            margin=ft.margin.only(left=310, top=185),\n-        )\n-\n-        ft.Column()\n-\n-        self.control_height = ft.Container(\n-            content=ft.Container(\n-                # width=140,\n-                content=ft.TextField(\n-                    # text_align=ft.alignment.center,\n-                    width=140,\n-                    # content_padding=ft.padding.only(left=5, right=15, top=30),\n-                    hint_text= \"Add Height\",\n-                    border= ft.InputBorder.UNDERLINE\n-                ),\n-            ),\n-            margin=ft.margin.only(left=15, top=185),\n-        )\n-        self.cover_component = ft.Container(\n-            width=460,\n-            border=ft.border.all(width=2, color=\"cyan\"),\n-            height=400,\n-            margin=ft.margin.only(bottom=480, top=350),\n-            content=ft.Column(\n-                controls=[\n-                    ft.Stack(\n-                        controls=[\n-                            self.gradient_color_box1,\n-                            self.gradient_color_box,\n-                            self.choose_begin,\n-                            self.choose_end,\n-                            self.control_rotation,\n-                            self.gradient,\n-                            heading_end,\n-                            heading_beign,\n-                        ]\n-                    )\n-                ],\n-                scroll=\"always\",\n-            ),\n-            border_radius=5,\n-        )\n-\n-        heading_opacity = ft.Container(\n-            margin=ft.margin.only(left=310, top=155),\n-            content=ft.Row(\n-                controls=[\n-                    ft.Text(value=\"Opacity\", size=15),\n-                ]\n-            ),\n-        )\n-\n-        self.propertiesColumn.controls[0].controls = [\n-            heading,\n-            heading_width,\n-            self.control_name_space,\n-            self.control_width,\n-            heading_Control_name,\n-            heading_height,\n-            self.color_box,\n-            self.control_height,\n-            heading_color,\n-            heading_opacity,\n-            self.control_opacity,\n-            heading_gradient,\n-            self.cover_component,\n-        ]\n-\n-        self.propertiesContainer.content = self.propertiesColumn\n-\n-        return self.propertiesContainer\n-\n-\n-def init_process():\n-    # Code to initialize each process if needed\n-    pass\n-\n-\n-def build_and_run(page):\n-    properties_toolbar = PropertiesToolbar(page)\n-    properties_container = properties_toolbar.build()\n-\n-    # Additional code to set up the rest of your application\n-\n-    # ft.run(page)\n-\n-\n-if __name__ == \"__main__\":\n-    # Create a multiprocessing.Pool\n-    with multiprocessing.Pool(\n-        processes=multiprocessing.cpu_count(), initializer=init_process\n-    ) as pool:\n-        # Create a page for each process\n-        pages = [ft.Page() for _ in range(pool._processes)]\n-\n-        # Use multiprocessing.Pool to run the build_and_run function for each process\n         pool.map(build_and_run, pages)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1702491191527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         if self.selection_value == \"LinearGradient\":\n             pass\n     \n     def on_update_control_property (self, control_unique_name:str, property_name:str, property_value:str):\n-        \n+        pass\n \n \n     def open_alert_dlg(self, e):\n         self.page.dialog = self.color_picker_modal\n"
                },
                {
                    "date": 1702523507974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \n class PropertiesToolbar(ft.UserControl):\n     def __init__(self, page, manager, parser_engine):\n         self.page = page\n+        self.object\n         super().__init__()\n         self.imanager = manager\n         self.parser_engine = parser_engine\n         self.expand = int((1 + 0.2) * 5)\n"
                },
                {
                    "date": 1702523514444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n class PropertiesToolbar(ft.UserControl):\n     def __init__(self, page, manager, parser_engine):\n         self.page = page\n-        self.object\n+        self.object_controller = parser_engine\n         super().__init__()\n         self.imanager = manager\n         self.parser_engine = parser_engine\n         self.expand = int((1 + 0.2) * 5)\n"
                },
                {
                    "date": 1702523520789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n class PropertiesToolbar(ft.UserControl):\n     def __init__(self, page, manager, parser_engine):\n         self.page = page\n-        self.object_controller = parser_engine\n+        self.object_controller = \n         super().__init__()\n         self.imanager = manager\n         self.parser_engine = parser_engine\n         self.expand = int((1 + 0.2) * 5)\n"
                },
                {
                    "date": 1702572274105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n class PropertiesToolbar(ft.UserControl):\n     def __init__(self, page, manager, parser_engine):\n         self.page = page\n-        self.object_controller = \n+        self.object_controller = None\n         super().__init__()\n         self.imanager = manager\n         self.parser_engine = parser_engine\n         self.expand = int((1 + 0.2) * 5)\n@@ -21,13 +21,14 @@\n     def on_change(self, e):\n         self.selection_value = e.control.value\n         if self.selection_value == \"LinearGradient\":\n             pass\n-    \n-    def on_update_control_property (self, control_unique_name:str, property_name:str, property_value:str):\n+\n+    def on_update_control_property(\n+        self, control_unique_name: str, property_name: str, property_value: str\n+    ):\n         pass\n \n-\n     def open_alert_dlg(self, e):\n         self.page.dialog = self.color_picker_modal\n         self.color_picker_modal.open = True\n         self.page.update()\n@@ -44,9 +45,9 @@\n \n     def use_color(self, e):\n         self.color_holder.bgcolor = self.color_picker.color\n         self.hex_holder.content.value = self.color_picker.color\n-        self.imanager.change_property('-c', self.color_picker.color)\n+        self.imanager.change_property(\"-c\", self.color_picker.color)\n         self.color_holder.update()\n         self.hex_holder.content.update()\n         self.color_picker_modal.open = False\n         self.color_holder.update()\n@@ -101,20 +102,20 @@\n             margin=ft.margin.only(top=10),\n             alignment=ft.alignment.center,\n             content=ft.Text(value=\"Properties\", size=20),\n         )\n-        \n+\n         # tight=True,\n         # spacing=1,\n-        heading_beign = ft.Container( # Be more specific \n+        heading_beign = ft.Container(  # Be more specific\n             margin=ft.margin.all(10),\n             content=ft.Text(value=\"Begin\", size=15),\n-            )\n+        )\n         heading_end = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Text(value=\"End\", size=15),\n-            )\n-        \n+        )\n+\n         self.color_holder = ft.Container(\n             width=20,\n             height=20,\n             bgcolor=ft.colors.RED,\n@@ -239,9 +240,8 @@\n         self.gradient_hex_holder1 = ft.Container(\n             content=ft.Text(value=\"#ff0000\", size=16)\n         )\n         self.hex_holder = ft.Container(content=ft.Text(value=\"#ff0000\", size=16))\n-        \n \n         self.gradient_color_box = ft.Container(\n             content=ft.Container(\n                 width=140,\n@@ -272,9 +272,9 @@\n                 width=120,\n                 height=40,\n             ),\n         )\n- \n+\n         self.gradient = ft.Container(\n             content=ft.Dropdown(\n                 width=170,\n                 autofocus=False,\n@@ -332,47 +332,46 @@\n                 on_change=self.on_change,\n             ),\n         )\n \n-        \n         ft.Column()\n \n         self.control_name_space = ft.Container(\n             content=ft.TextField(\n                 text_align=ft.alignment.center,\n-                hint_text= \"Add Name\",\n-                border= ft.InputBorder.UNDERLINE\n+                hint_text=\"Add Name\",\n+                border=ft.InputBorder.UNDERLINE,\n             ),\n         )\n         self.control_width = ft.Container(\n             content=ft.TextField(\n                 text_align=ft.alignment.center,\n                 width=140,\n-                hint_text= \"Add Width\",\n-                border= ft.InputBorder.UNDERLINE,\n-                on_change= lambda e: self.change(e, \"-w\")\n+                hint_text=\"Add Width\",\n+                border=ft.InputBorder.UNDERLINE,\n+                on_change=lambda e: self.change(e, \"-w\"),\n             ),\n         )\n         self.control_height = ft.Container(\n             content=ft.TextField(\n                 text_align=ft.alignment.center,\n                 width=140,\n-                hint_text= \"Add Height\",\n-                border= ft.InputBorder.UNDERLINE,\n-                on_change= lambda e: self.change(e, \"-h\")\n+                hint_text=\"Add Height\",\n+                border=ft.InputBorder.UNDERLINE,\n+                on_change=lambda e: self.change(e, \"-h\"),\n             ),\n         )\n         self.control_opacity = ft.Container(\n             content=ft.TextField(\n                 text_align=ft.alignment.center,\n                 width=140,\n-                hint_text= \"Add Opacity\",\n-                border= ft.InputBorder.UNDERLINE,\n+                hint_text=\"Add Opacity\",\n+                border=ft.InputBorder.UNDERLINE,\n                 # ,\n-                on_change= lambda e: self.change(e, \"-o\")\n+                on_change=lambda e: self.change(e, \"-o\"),\n             ),\n         )\n-        self.color_box = ft.Container( # why does it have two containers\n+        self.color_box = ft.Container(  # why does it have two containers\n             content=ft.Container(\n                 width=140,\n                 height=30,\n                 bgcolor=ft.colors.GREY_800,\n@@ -383,116 +382,115 @@\n         self.cover_component = ft.Container(\n             width=460,\n             border=ft.border.all(width=2, color=\"cyan\"),\n             height=400,\n-            padding= ft.padding.all(10),\n+            padding=ft.padding.all(10),\n             content=ft.Column(\n-                spacing= 0,\n+                spacing=0,\n                 controls=[\n                     ft.Row(\n-                        wrap= True,\n+                        wrap=True,\n                         controls=[\n                             self.gradient,\n                             self.control_rotation,\n                         ],\n-                        alignment= ft.MainAxisAlignment.SPACE_BETWEEN,\n+                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                     ),\n-                    heading_beign, # Be more specific with the naming\n+                    heading_beign,  # Be more specific with the naming\n                     ft.Row(\n-                        wrap= True,\n+                        wrap=True,\n                         controls=[\n                             self.gradient_color_box,\n                             self.choose_begin,\n-                            \n-                        ]\n+                        ],\n                     ),\n                     heading_end,\n                     ft.Row(\n-                        wrap= True,\n+                        wrap=True,\n                         controls=[\n                             self.gradient_color_box1,\n                             self.choose_end,\n-                            \n-                        ]\n-                    )\n+                        ],\n+                    ),\n                 ],\n                 scroll=\"always\",\n             ),\n             border_radius=5,\n         )\n-        \n+\n         heading_Control_name = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 0,\n+                spacing=0,\n                 controls=[\n                     ft.Text(value=\"Control Name\", size=15),\n                     self.control_name_space,\n-                ]\n+                ],\n             ),\n         )\n-        \n+\n         heading_width = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 0,\n+                spacing=0,\n                 controls=[\n                     ft.Text(value=\"Width\", size=15),\n                     self.control_width,\n-                ]\n+                ],\n             ),\n         )\n         heading_height = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 0,\n+                spacing=0,\n                 controls=[\n                     ft.Text(value=\"Height\", size=15),\n                     self.control_height,\n-                ]\n+                ],\n             ),\n         )\n         heading_opacity = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 0,\n+                spacing=0,\n                 controls=[\n                     ft.Text(value=\"Opacity\", size=15),\n                     self.control_opacity,\n-                ]\n+                ],\n             ),\n         )\n-        \n+\n         heading_color = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 5,\n+                spacing=5,\n                 controls=[\n                     ft.Text(value=\"Color\", size=15),\n                     self.color_box,\n-                ]\n+                ],\n             ),\n         )\n         heading_gradient = ft.Container(\n             margin=ft.margin.all(10),\n             content=ft.Column(\n-                spacing= 5,\n+                spacing=5,\n                 controls=[\n                     ft.Text(value=\"Gradient\", size=15),\n                     self.cover_component,\n-                ]\n+                ],\n             ),\n         )\n         \n+\n         # can use a for loop instead to reduce redundancy\n         heading_grid = ft.GridView(\n-            max_extent= 150,\n-            child_aspect_ratio= 1.5,\n+            max_extent=150,\n+            child_aspect_ratio=1.5,\n             controls=[\n                 heading_height,\n                 heading_width,\n                 heading_opacity,\n-            ]\n+            ],\n         )\n \n         self.propertiesColumn.controls = [\n             heading,\n@@ -529,5 +527,5 @@\n         # Create a page for each process\n         pages = [ft.Page() for _ in range(pool._processes)]\n \n         # Use multiprocessing.Pool to run the build_and_run function for each process\n-        pool.map(build_and_run, pages)\n\\ No newline at end of file\n+        pool.map(build_and_run, pages)\n"
                },
                {
                    "date": 1702572279148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,8 +369,17 @@\n                 # ,\n                 on_change=lambda e: self.change(e, \"-o\"),\n             ),\n         )\n+         self.control_border_radius = ft.Container(\n+            content=ft.TextField(\n+                text_align=ft.alignment.center,\n+                width=140,\n+                hint_text=\"Border Radius\",\n+                border=ft.InputBorder.UNDERLINE,\n+                on_change=lambda e: self.change(e, \"-b\"),\n+            ),\n+        )\n         self.color_box = ft.Container(  # why does it have two containers\n             content=ft.Container(\n                 width=140,\n                 height=30,\n"
                },
                {
                    "date": 1702572331863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,8 +487,19 @@\n                     self.cover_component,\n                 ],\n             ),\n         )\n+        \n+        heading_border_radius = ft.Container(\n+            margin=ft.margin.all(10),\n+            content=ft.Column(\n+                spacing=5,\n+                controls=[\n+                    ft.Text(value=\"Border Radius\", size=15),\n+                    self.control_border_radius,\n+                ],\n+            ),\n+        )\n \n         # can use a for loop instead to reduce redundancy\n         heading_grid = ft.GridView(\n             max_extent=150,\n"
                },
                {
                    "date": 1702572337175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -516,8 +516,9 @@\n             heading_Control_name,\n             heading_grid,\n             heading_color,\n             heading_gradient,\n+            heading_border_radius\n         ]\n \n         self.propertiesContainer.content = self.propertiesColumn\n \n"
                }
            ],
            "date": 1701511591447,
            "name": "Commit-0",
            "content": "import multiprocessing\nimport flet as ft\nfrom ..ColorPicker.color_picker import ColorPicker\n\n# ft.Dis\n\n\n# ft.SweepGradient()\nft.Container()\n\n\nclass PropertiesToolbar(ft.UserControl):\n    def __init__(self, page,):\n        self.page = page\n        super().__init__()\n        self.expand = int((1 + 0.2) * 5)\n\n    def on_change(self, e):\n        self.selection_value = e.control.value\n        if self.selection_value == \"LinearGradient\":\n            pass\n\n    def open_alert_dlg(self, e):\n        self.page.dialog = self.color_picker_modal\n        self.color_picker_modal.open = True\n        self.page.update()\n\n    def open_alert_dlg1(self, e):\n        self.page.dialog = self.color_picker_modal1\n        self.color_picker_modal1.open = True\n        self.page.update()\n\n    def open_alert_dlg2(self, e):\n        self.page.dialog = self.color_picker_modal2\n        self.color_picker_modal2.open = True\n        self.page.update()\n\n    def use_color(self, e):\n        self.color_holder.bgcolor = self.color_picker.color\n        self.hex_holder.content.value = self.color_picker.color\n        self.color_holder.update()\n        self.hex_holder.content.update()\n        self.color_picker_modal.open = False\n        self.color_holder.update()\n        self.page.update()\n\n    def use_color_gradient(self, e):\n        self.gradient_color_holder.bgcolor = self.color_picker1.color\n        self.gradient_hex_holder.content.value = self.color_picker1.color\n        self.gradient_color_holder.update()\n        self.gradient_hex_holder.content.update()\n        self.color_picker_modal1.open = False\n        self.gradient_color_holder.update()\n        self.page.update()\n\n    def use_color_gradient1(self, e):\n        self.gradient_color_holder1.bgcolor = self.color_picker2.color\n        self.gradient_hex_holder1.content.value = self.color_picker2.color\n        self.gradient_color_holder1.update()\n        self.gradient_hex_holder1.content.update()\n        self.color_picker_modal2.open = False\n        self.gradient_color_holder1.update()\n        self.page.update()\n\n    def close_dlg(self, e):\n        self.color_picker_modal.open = False\n        self.page.update()\n\n    def close_dlg1(self, e):\n        self.color_picker_modal1.open = False\n        self.page.update()\n\n    def close_dlg2(self, e):\n        self.color_picker_modal2.open = False\n        self.page.update()\n\n    def build(self):\n        # (existing build code)\n\n        self.propertiesContainer = ft.Container(\n            # width=((2.5 / 10) * self.window_width),\n            height=1200,\n            bgcolor=ft.colors.with_opacity(opacity=0.6, color=ft.colors.BLACK45),\n            border_radius=ft.border_radius.all(15),\n            # padding=ft.padding.only(left=15, right=15, top=30),\n        )\n\n        self.propertiesColumn = ft.Column(controls=[ft.Stack()], scroll=\"always\")\n\n        heading = ft.Container(\n            margin=ft.margin.only(top=10),\n            alignment=ft.alignment.center,\n            content=ft.Text(value=\"Properties\", size=20),\n        )\n        heading_Control_name = ft.Container(\n            margin=ft.margin.only(top=60, left=10),\n            content=ft.Row(\n                controls=[\n                    ft.Text(value=\"Control Name\", size=15),\n                ]\n            ),\n        )\n        # tight=True,\n\n        heading_width = ft.Row(\n            controls=[\n                ft.Container(\n                    margin=ft.margin.only(left=160, top=155),\n                    content=ft.Row(\n                        controls=[\n                            ft.Text(value=\"Width\", size=15),\n                        ]\n                    ),\n                )\n            ],\n        )\n\n        heading_height = ft.Container(\n            margin=ft.margin.only(top=155, left=10),\n            content=ft.Row(\n                controls=[\n                    ft.Text(value=\"Height\", size=15),\n                ]\n            ),\n        )\n\n        # spacing=1,\n\n        heading_color = ft.Row(\n            # spacing=1,\n            controls=[\n                ft.Container(\n                    margin=ft.margin.only(top=260, left=10),\n                    content=ft.Text(value=\"Color\", size=15),\n                )\n            ],\n        )\n        heading_gradient = ft.Row(\n            # spacing=1,\n            alignment=ft.alignment.center,\n            controls=[\n                ft.Container(\n                    margin=ft.margin.only(top=330, left=10),\n                    content=ft.Text(value=\"Gradient\", size=15),\n                    alignment=ft.alignment.center,\n                )\n            ],\n        )\n        heading_beign = ft.Row(\n            # spacing=1,\n            controls=[\n                ft.Container(\n                    margin=ft.margin.only(top=75, left=200),\n                    content=ft.Text(value=\"Begin\", size=16),\n                )\n            ],\n        )\n        heading_end = ft.Row(\n            # spacing=1,\n            controls=[\n                ft.Container(\n                    margin=ft.margin.only(top=140, left=200),\n                    content=ft.Text(value=\"End\", size=16),\n                )\n            ],\n        )\n        self.color_holder = ft.Container(\n            width=20,\n            height=20,\n            bgcolor=ft.colors.RED,\n            border_radius=5,\n            margin=ft.margin.only(left=10),\n            on_click=self.open_alert_dlg,\n            # ink=True,\n        )\n        self.gradient_color_holder = ft.Container(\n            width=20,\n            height=20,\n            bgcolor=ft.colors.RED,\n            border_radius=5,\n            margin=ft.margin.only(left=10),\n            on_click=self.open_alert_dlg1,\n            # ink=True,\n        )\n        self.gradient_color_holder1 = ft.Container(\n            width=20,\n            height=20,\n            bgcolor=ft.colors.RED,\n            border_radius=5,\n            margin=ft.margin.only(left=10),\n            on_click=self.open_alert_dlg2,\n            # ink=True,\n        )\n\n        self.color_picker = ColorPicker(color=\"#c8df6f\", width=300)\n        self.color_picker1 = ColorPicker(color=\"#c8df6f\", width=300)\n        self.color_picker2 = ColorPicker(color=\"#c8df6f\", width=300)\n        self.color_picker_modal = ft.AlertDialog(\n            shape=ft.RoundedRectangleBorder(radius=6),\n            content=self.color_picker,\n            actions=[\n                ft.Container(\n                    width=90,\n                    height=36,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.WHITE30,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.close_dlg,\n                    content=ft.Text(\"Cancel\", size=16),\n                ),\n                ft.Container(\n                    width=90,\n                    height=38,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.BLACK,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.use_color,\n                    content=ft.Text(\"Use Color\", size=16),\n                ),\n            ],\n            actions_alignment=ft.MainAxisAlignment.END,\n        )\n        self.color_picker_modal1 = ft.AlertDialog(\n            shape=ft.RoundedRectangleBorder(radius=6),\n            content=self.color_picker1,\n            actions=[\n                ft.Container(\n                    width=90,\n                    height=36,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.WHITE30,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.close_dlg1,\n                    content=ft.Text(\"Cancel\", size=16),\n                ),\n                ft.Container(\n                    width=90,\n                    height=38,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.BLACK,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.use_color_gradient,\n                    content=ft.Text(\"Use Color\", size=16),\n                ),\n            ],\n            actions_alignment=ft.MainAxisAlignment.END,\n        )\n        self.color_picker_modal2 = ft.AlertDialog(\n            shape=ft.RoundedRectangleBorder(radius=6),\n            content=self.color_picker2,\n            actions=[\n                ft.Container(\n                    width=90,\n                    height=36,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.WHITE30,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.close_dlg2,\n                    content=ft.Text(\"Cancel\", size=16),\n                ),\n                ft.Container(\n                    width=90,\n                    height=38,\n                    # margin=ft.margin.only(top=130),\n                    bgcolor=ft.colors.BLACK,\n                    alignment=ft.alignment.center,\n                    border_radius=8,\n                    ink=True,\n                    on_click=self.use_color_gradient1,\n                    content=ft.Text(\"Use Color\", size=16),\n                ),\n            ],\n            actions_alignment=ft.MainAxisAlignment.END,\n        )\n\n        self.gradient_hex_holder = ft.Container(\n            content=ft.Text(value=\"#ff0000\", size=16)\n        )\n        self.gradient_hex_holder1 = ft.Container(\n            content=ft.Text(value=\"#ff0000\", size=16)\n        )\n        self.hex_holder = ft.Container(content=ft.Text(value=\"#ff0000\", size=16))\n        self.color_box = ft.Container(\n            content=ft.Container(\n                width=140,\n                height=30,\n                bgcolor=ft.colors.GREY_800,\n                # margin=ft.margin.only(left=10, top=290),\n                border_radius=7,\n                content=ft.Row(controls=[self.color_holder, self.hex_holder]),\n                margin=ft.margin.only(left=10, top=290),\n            )\n        )\n\n        self.gradient_color_box = ft.Container(\n            content=ft.Container(\n                width=140,\n                height=30,\n                bgcolor=ft.colors.GREY_800,\n                # margin=ft.margin.only(left=10, top=290),\n                border_radius=7,\n                content=ft.Row(\n                    controls=[self.gradient_color_holder, self.gradient_hex_holder]\n                ),\n                margin=ft.margin.only(left=10, top=75),\n            )\n        )\n        self.gradient_color_box1 = ft.Container(\n            content=ft.Container(\n                width=140,\n                height=30,\n                bgcolor=ft.colors.GREY_800,\n                # margin=ft.margin.only(left=10, top=290),\n                border_radius=7,\n                content=ft.Row(\n                    controls=[self.gradient_color_holder1, self.gradient_hex_holder1]\n                ),\n                margin=ft.margin.only(left=10, top=140),\n            )\n        )\n\n        self.control_name_space = ft.Container(\n            content=ft.TextField(\n                text_align=ft.alignment.center,\n                # content_padding=ft.padding.only(left=5, right=80),\n                # label=\"Control Name\",\n                width=380,\n                hint_text= \"Add Name\",\n                border= ft.InputBorder.UNDERLINE\n            ),\n            margin=ft.margin.only(left=10, top=90),\n        )\n        self.control_rotation = ft.Container(\n            content=ft.TextField(\n                text_align=ft.alignment.center,\n                # content_padding=ft.padding.only(left=5, right=80),\n                label=\"Rotation\",\n                width=120,\n                height=40,\n            ),\n            margin=ft.margin.only(left=310, top=10),\n        )\n\n        self.control_width = ft.Container(\n            content=ft.TextField(\n                text_align=ft.alignment.center,\n                width=140,\n                # content_padding=ft.padding.only(left=5, right=5),\n                hint_text= \"Add Width\",\n                border= ft.InputBorder.UNDERLINE\n                o\n            ),\n            margin=ft.margin.only(left=160, top=185),\n        )\n\n        self.gradient = ft.Container(\n            margin=ft.margin.only(top=10, left=10),\n            content=ft.Dropdown(\n                width=170,\n                autofocus=False,\n                border_color=\"black\",\n                border=ft.border.all(color=\"black\", width=1),\n                hint_text=\"Choose Gradient Type\",\n                options=[\n                    ft.dropdown.Option(key=\"LinearGradient\"),\n                    ft.dropdown.Option(key=\"RadialGradient\"),\n                    ft.dropdown.Option(key=\"SweepGradient\"),\n                ],\n                on_change=self.on_change,\n            ),\n        )\n\n        self.choose_begin = ft.Container(\n            margin=ft.margin.only(top=60, left=270),\n            content=ft.Dropdown(\n                width=170,\n                autofocus=False,\n                border_color=\"black\",\n                border=ft.border.all(color=\"black\", width=1),\n                hint_text=\"Choose Begin\",\n                options=[\n                    ft.dropdown.Option(key=\"center\"),\n                    ft.dropdown.Option(key=\"center_left\"),\n                    ft.dropdown.Option(key=\"center_right\"),\n                    ft.dropdown.Option(key=\"bottom_center\"),\n                    ft.dropdown.Option(key=\"bottom_left\"),\n                    ft.dropdown.Option(key=\"bottom_right\"),\n                    ft.dropdown.Option(key=\"top_center\"),\n                    ft.dropdown.Option(key=\"top_right\"),\n                    ft.dropdown.Option(key=\"top_left\"),\n                ],\n                on_change=self.on_change,\n            ),\n        )\n        self.choose_end = ft.Container(\n            margin=ft.margin.only(top=140, left=270),\n            content=ft.Dropdown(\n                width=170,\n                autofocus=False,\n                border_color=\"black\",\n                border=ft.border.all(color=\"black\", width=1),\n                hint_text=\"Choose End\",\n                options=[\n                    ft.dropdown.Option(key=\"center\"),\n                    ft.dropdown.Option(key=\"center_left\"),\n                    ft.dropdown.Option(key=\"center_right\"),\n                    ft.dropdown.Option(key=\"bottom_center\"),\n                    ft.dropdown.Option(key=\"bottom_left\"),\n                    ft.dropdown.Option(key=\"bottom_right\"),\n                    ft.dropdown.Option(key=\"top_center\"),\n                    ft.dropdown.Option(key=\"top_right\"),\n                    ft.dropdown.Option(key=\"top_left\"),\n                ],\n                on_change=self.on_change,\n            ),\n        )\n\n        # print(self.gradient.content.options[1])\n\n        self.control_opacity = ft.Container(\n            content=ft.TextField(\n                text_align=ft.alignment.center,\n                width=140,\n                # content_padding=ft.padding.only(left=5, right=5),\n                hint_text= \"Add Opacity\",\n                border= ft.InputBorder.UNDERLINE\n            ),\n            margin=ft.margin.only(left=310, top=185),\n        )\n\n        ft.Column()\n\n        self.control_height = ft.Container(\n            content=ft.Container(\n                # width=140,\n                content=ft.TextField(\n                    # text_align=ft.alignment.center,\n                    width=140,\n                    # content_padding=ft.padding.only(left=5, right=15, top=30),\n                    hint_text= \"Add Height\",\n                    border= ft.InputBorder.UNDERLINE\n                ),\n            ),\n            margin=ft.margin.only(left=15, top=185),\n        )\n        self.cover_component = ft.Container(\n            width=460,\n            border=ft.border.all(width=2, color=\"cyan\"),\n            height=400,\n            margin=ft.margin.only(bottom=480, top=350),\n            content=ft.Column(\n                controls=[\n                    ft.Stack(\n                        controls=[\n                            self.gradient_color_box1,\n                            self.gradient_color_box,\n                            self.choose_begin,\n                            self.choose_end,\n                            self.control_rotation,\n                            self.gradient,\n                            heading_end,\n                            heading_beign,\n                        ]\n                    )\n                ],\n                scroll=\"always\",\n            ),\n            border_radius=5,\n        )\n\n        heading_opacity = ft.Container(\n            margin=ft.margin.only(left=310, top=155),\n            content=ft.Row(\n                controls=[\n                    ft.Text(value=\"Opacity\", size=15),\n                ]\n            ),\n        )\n\n        self.propertiesColumn.controls[0].controls = [\n            heading,\n            heading_width,\n            self.control_name_space,\n            self.control_width,\n            heading_Control_name,\n            heading_height,\n            self.color_box,\n            self.control_height,\n            heading_color,\n            heading_opacity,\n            self.control_opacity,\n            heading_gradient,\n            self.cover_component,\n        ]\n\n        self.propertiesContainer.content = self.propertiesColumn\n\n        return self.propertiesContainer\n\n\ndef init_process():\n    # Code to initialize each process if needed\n    pass\n\n\ndef build_and_run(page):\n    properties_toolbar = PropertiesToolbar(page)\n    properties_container = properties_toolbar.build()\n\n    # Additional code to set up the rest of your application\n\n    # ft.run(page)\n\n\nif __name__ == \"__main__\":\n    # Create a multiprocessing.Pool\n    with multiprocessing.Pool(\n        processes=multiprocessing.cpu_count(), initializer=init_process\n    ) as pool:\n        # Create a page for each process\n        pages = [ft.Page() for _ in range(pool._processes)]\n\n        # Use multiprocessing.Pool to run the build_and_run function for each process\n        pool.map(build_and_run, pages)"
        }
    ]
}