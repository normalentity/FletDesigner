{
    "sourceFile": "Parser/Parserengine.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1695926737329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695926762933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+from flet import *\n+import json\n+\n+\n+class Parser:\n+    def __init__(self, jsonfilepath: str):\n+        with open(jsonfilepath) as f:\n+            self.json = json.load(f)\n+        self.keys = {}\n+        # self.parse()\n+        # self.button = self.button\n+        # self.button = button\n+\n+    def parse(self):\n+        for item in self.json:\n+            for key, val in item.items():\n+                if val[\"type\"] == \"Container\":\n+                    self.keys[f\"{key}\"] = Container()\n+                    assert isinstance(self.keys[f\"{key}\"], Container)\n+                    # Update the properties of self.c1\n+                    self.keys[f\"{key}\"].width = val[\"width\"]\n+                    self.keys[f\"{key}\"].height = val[\"height\"]\n+                    self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n+\n+                if val[\"type\"] == \"IconButton\":\n+                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n+                    assert isinstance(self.keys[f\"{key}\"], TextButton)\n+                    # Update the properties of self.c1\n+                    self.keys[f\"{key}\"].width = val[\"width\"]\n+                    self.keys[f\"{key}\"].height = val[\"height\"]\n+                    # self.button.bgcolor = val[\"bgcolor\"]\n+                    self.keys[f\"{key}\"].icon = icons.COFFEE\n+                    self.keys[f\"{key}\"].text = \"icon\"\n"
                },
                {
                    "date": 1695927053934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,51 +15,19 @@\n         for item in self.json:\n             for key, val in item.items():\n                 if val[\"type\"] == \"Container\":\n                     self.keys[f\"{key}\"] = Container()\n-                    assert isinstance(self.keys[f\"{key}\"], Container)\n+                    # assert isinstance(self.keys[f\"{key}\"], Container)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n \n                 if val[\"type\"] == \"IconButton\":\n                     self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n-                    assert isinstance(self.keys[f\"{key}\"], TextButton)\n+                    # assert isinstance(self.keys[f\"{key}\"], TextButton)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     # self.button.bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].icon = icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n-from flet import *\n-import json\n-\n-\n-class Parser:\n-    def __init__(self, jsonfilepath: str):\n-        with open(jsonfilepath) as f:\n-            self.json = json.load(f)\n-        self.keys = {}\n-        # self.parse()\n-        # self.button = self.button\n-        # self.button = button\n-\n-    def parse(self):\n-        for item in self.json:\n-            for key, val in item.items():\n-                if val[\"type\"] == \"Container\":\n-                    self.keys[f\"{key}\"] = Container()\n-                    assert isinstance(self.keys[f\"{key}\"], Container)\n-                    # Update the properties of self.c1\n-                    self.keys[f\"{key}\"].width = val[\"width\"]\n-                    self.keys[f\"{key}\"].height = val[\"height\"]\n-                    self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n-\n-                if val[\"type\"] == \"IconButton\":\n-                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n-                    # Update the properties of self.c1\n-                    self.keys[f\"{key}\"].width = val[\"width\"]\n-                    self.keys[f\"{key}\"].height = val[\"height\"]\n-                    # self.button.bgcolor = val[\"bgcolor\"]\n-                    self.keys[f\"{key}\"].icon = icons.COFFEE\n-                    self.keys[f\"{key}\"].text = \"icon\"\n"
                },
                {
                    "date": 1695927065165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,17 +15,17 @@\n         for item in self.json:\n             for key, val in item.items():\n                 if val[\"type\"] == \"Container\":\n                     self.keys[f\"{key}\"] = Container()\n-                    # assert isinstance(self.keys[f\"{key}\"], Container)\n+                    assert isinstance(self.keys[f\"{key}\"], Container)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n \n                 if val[\"type\"] == \"IconButton\":\n                     self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n-                    # assert isinstance(self.keys[f\"{key}\"], TextButton)\n+                    assert isinstance(self.keys[f\"{key}\"], TextButton)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     # self.button.bgcolor = val[\"bgcolor\"]\n"
                },
                {
                    "date": 1695929685202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     def parse(self):\n         for item in self.json:\n             for key, val in item.items():\n                 if val[\"type\"] == \"Container\":\n-                    self.keys[f\"{key}\"] = Container()\n+                    self.keys[f\"{key}\"] : Container = Container()\n                     assert isinstance(self.keys[f\"{key}\"], Container)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n"
                },
                {
                    "date": 1695929740171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     def parse(self):\n         for item in self.json:\n             for key, val in item.items():\n                 if val[\"type\"] == \"Container\":\n-                    self.keys[f\"{key}\"] : Container = Container()\n+                    self.keys[f\"{key}\"] = Container()\n                     assert isinstance(self.keys[f\"{key}\"], Container)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n"
                },
                {
                    "date": 1696001954358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n+                    self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                    \n \n                 if val[\"type\"] == \"IconButton\":\n                     self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n                     assert isinstance(self.keys[f\"{key}\"], TextButton)\n"
                },
                {
                    "date": 1696002096664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from flet import *\n+import flet as ft\n import json\n \n \n class Parser:\n@@ -14,22 +14,22 @@\n     def parse(self):\n         for item in self.json:\n             for key, val in item.items():\n                 if val[\"type\"] == \"Container\":\n-                    self.keys[f\"{key}\"] = Container()\n-                    assert isinstance(self.keys[f\"{key}\"], Container)\n+                    self.keys[f\"{key}\"] = ft.Container()\n+                    assert isinstance(self.keys[f\"{key}\"], ft.Container)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n                     \n \n                 if val[\"type\"] == \"IconButton\":\n-                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n-                    assert isinstance(self.keys[f\"{key}\"], TextButton)\n+                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n+                    assert isinstance(self.keys[f\"{key}\"], ft.TextButton)\n                     # Update the properties of self.c1\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     # self.button.bgcolor = val[\"bgcolor\"]\n-                    self.keys[f\"{key}\"].icon = icons.COFFEE\n+                    self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n"
                },
                {
                    "date": 1696002228557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                    self.keys[f\"{key}\"].border_radius=\n                     \n \n                 if val[\"type\"] == \"IconButton\":\n                     self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n"
                },
                {
                    "date": 1696002261557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n                     self.keys[f\"{key}\"].width = val[\"width\"]\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n-                    self.keys[f\"{key}\"].border_radius=\n+                    self.keys[f\"{key}\"].border_radius=ft.border_radius.all(val['border_radius'])\n                     \n \n                 if val[\"type\"] == \"IconButton\":\n                     self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n"
                },
                {
                    "date": 1696003950759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,4 +33,5 @@\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     # self.button.bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n+                    self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n"
                },
                {
                    "date": 1696004105814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,4 +34,5 @@\n                     # self.button.bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                    self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n"
                },
                {
                    "date": 1696004118015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,5 @@\n                     # self.button.bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n-                    self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+\n"
                },
                {
                    "date": 1696004201126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,5 @@\n                     # self.button.bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                     self.keys[f\"{key}\"].text = \"icon\"\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n-\n+                    \n"
                },
                {
                    "date": 1696005771898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,17 @@\n                     self.keys[f\"{key}\"].border_radius=ft.border_radius.all(val['border_radius'])\n                     \n \n                 if val[\"type\"] == \"IconButton\":\n-                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n-                    assert isinstance(self.keys[f\"{key}\"], ft.TextButton)\n-                    # Update the properties of self.c1\n-                    self.keys[f\"{key}\"].width = val[\"width\"]\n-                    self.keys[f\"{key}\"].height = val[\"height\"]\n-                    # self.button.bgcolor = val[\"bgcolor\"]\n-                    self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n-                    self.keys[f\"{key}\"].text = \"icon\"\n-                    self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                    try:\n+                        self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n+                        assert isinstance(self.keys[f\"{key}\"], ft.TextButton)\n+                        # Update the properties of self.c1\n+                        self.keys[f\"{key}\"].width = val[\"width\"]\n+                        self.keys[f\"{key}\"].height = val[\"height\"]\n+                        # self.button.bgcolor = val[\"bgcolor\"]\n+                        self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n+                        self.keys[f\"{key}\"].text = \"icon\"\n+                        self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                    except AttributeError:\n+                        print(\"There is no widged named such \")\n                     \n"
                },
                {
                    "date": 1696006484510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,7 +35,8 @@\n                         # self.button.bgcolor = val[\"bgcolor\"]\n                         self.keys[f\"{key}\"].icon = ft.icons.COFFEE\n                         self.keys[f\"{key}\"].text = \"icon\"\n                         self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n+                        self.keys[f\"{key}\"].expand= False\n                     except AttributeError:\n                         print(\"There is no widged named such \")\n                     \n"
                },
                {
                    "date": 1696006990420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n                     self.keys[f\"{key}\"].height = val[\"height\"]\n                     self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n                     self.keys[f\"{key}\"].opacity = val[\"opacity\"]\n                     self.keys[f\"{key}\"].border_radius=ft.border_radius.all(val['border_radius'])\n+                    self.keys[f\"{key}\"].expand = False\n                     \n \n                 if val[\"type\"] == \"IconButton\":\n                     try:\n"
                },
                {
                    "date": 1696163511322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n                 if val[\"type\"] == \"IconButton\":\n                     try:\n                         self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n-                        assert isinstance(self.keys[f\"{key}\"], ft.TextButton)\n+                        assert isinstance(self.keys[f\"{key}\"], ft.TextButton.)\n                         # Update the properties of self.c1\n                         self.keys[f\"{key}\"].width = val[\"width\"]\n                         self.keys[f\"{key}\"].height = val[\"height\"]\n                         # self.button.bgcolor = val[\"bgcolor\"]\n"
                },
                {
                    "date": 1696163599250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n                 if val[\"type\"] == \"IconButton\":\n                     try:\n                         self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = ft.TextButton()\n-                        assert isinstance(self.keys[f\"{key}\"], ft.TextButton.)\n+                        assert isinstance(self.keys[f\"{key}\"], ft.TextButton)\n                         # Update the properties of self.c1\n                         self.keys[f\"{key}\"].width = val[\"width\"]\n                         self.keys[f\"{key}\"].height = val[\"height\"]\n                         # self.button.bgcolor = val[\"bgcolor\"]\n"
                }
            ],
            "date": 1695926737329,
            "name": "Commit-0",
            "content": "from flet import *\nimport json\n\n\nclass Parser:\n    def __init__(self, jsonfilepath: str):\n        with open(jsonfilepath) as f:\n            self.json = json.load(f)\n        self.keys = {}\n        # self.parse()\n        # self.button = self.button\n        # self.button = button\n\n    def parse(self):\n        for item in self.json:\n            for key, val in item.items():\n                if val[\"type\"] == \"Container\":\n                    self.keys[f\"{key}\"] = Container()\n                    assert isinstance(self.keys[f\"{key}\"], Container)\n                    # Update the properties of self.c1\n                    self.keys[f\"{key}\"].width = val[\"width\"]\n                    self.keys[f\"{key}\"].height = val[\"height\"]\n                    self.keys[f\"{key}\"].bgcolor = val[\"bgcolor\"]\n\n                if val[\"type\"] == \"IconButton\":\n                    self.keys[f\"{key}\"] = self.keys[f\"c1\"].content = TextButton()\n                    # Update the properties of self.c1\n                    self.keys[f\"{key}\"].width = val[\"width\"]\n                    self.keys[f\"{key}\"].height = val[\"height\"]\n                    # self.button.bgcolor = val[\"bgcolor\"]\n                    self.keys[f\"{key}\"].icon = icons.COFFEE\n                    self.keys[f\"{key}\"].text = \"icon\"\n"
        }
    ]
}