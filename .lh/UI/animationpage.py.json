{
    "sourceFile": "UI/animationpage.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1696016357252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1696016370844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n import flet as ft\n \n \n-view = ft.View(route=\"/welcome\")\n+view = ft.View(route=\"/welcome\",controls=[])\n"
                },
                {
                    "date": 1696016501201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,305 @@\n import flet as ft\n \n \n-view = ft.View(route=\"/welcome\", controls=[])\n+view = ft.View(route=\"/welcome\", controls=[\n+    size = 40\n+    gap = 2\n+    duration = 2000\n+\n+    c1 = colors.PINK_500\n+    c2 = colors.AMBER_500\n+    c3 = colors.LIGHT_GREEN_500\n+    c4 = colors.DEEP_PURPLE_500\n+\n+    all_colors = [\n+        colors.AMBER_400,\n+        colors.AMBER_ACCENT_400,\n+        colors.BLUE_400,\n+        colors.BROWN_400,\n+        colors.CYAN_700,\n+        colors.DEEP_ORANGE_500,\n+        colors.CYAN_500,\n+        colors.INDIGO_600,\n+        colors.ORANGE_ACCENT_100,\n+        colors.PINK,\n+        colors.RED_600,\n+        colors.GREEN_400,\n+        colors.GREEN_ACCENT_200,\n+        colors.TEAL_ACCENT_200,\n+        colors.LIGHT_BLUE_500,\n+    ]\n+    designer_top = 8\n+    designer_size = 17\n+    designer_gap = 3\n+    designer_leftmargin = 0\n+    parts = [\n+            # F\n+            [\n+            {\"left\":0, \"top\":0, \"size\": 20, \"gap\": 5},\n+            (0, 0, c1),\n+            (0, 1, c1),\n+            (0, 2, c1),\n+            (0, 3, c1),\n+            (0, 4, c1),\n+            (1, 0, c1),\n+            (1, 2, c1),\n+            (2, 0, c1),\n+            ],\n+            # L\n+            [\n+            {\"left\":8, \"top\":0, \"size\": 20, \"gap\": 5},\n+            (0, 0, c2),\n+            (0, 1, c2),\n+            (0, 2, c2),\n+            (0, 3, c2),\n+            (0, 4, c2),\n+            (1, 4, c2),\n+            (2, 4, c2),\n+            ],\n+            # E\n+            [\n+            {\"left\":16, \"top\":0, \"size\": 20, \"gap\": 5},\n+            (0, 0, c3),\n+            (1, 0, c3),\n+            (2, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (1, 2, c3),\n+            (2, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (1, 4, c3),\n+            (2, 4, c3),\n+            ],\n+            # T\n+            [\n+            {\"left\":24, \"top\":0, \"size\": 20, \"gap\": 5},\n+            (0, 0, c4),\n+            (1, 0, c4),\n+            (2, 0, c4),\n+            (1, 1, c4),\n+            (1, 2, c4),\n+            (1, 3, c4),\n+            (1, 4, c4),\n+            ],\n+            # D\n+            [\n+            {\"left\":0, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c4),\n+            (0, 1, c4),\n+            (0, 2, c4),\n+            (0, 3, c4),\n+            (0, 4, c4),\n+            (1, 0, c4),\n+            (1, 4, c4),\n+            (2, 0, c4),\n+            (2, 4, c4),\n+            (3, 2, c4),\n+            (3, 1, c4),\n+            (3, 3, c4),\n+            ],\n+            # E\n+            [\n+            {\"left\":5+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (1, 0, c3),\n+            (2, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (1, 2, c3),\n+            (2, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (1, 4, c3),\n+            (2, 4, c3),\n+            ],\n+            # S\n+            [\n+            {\"left\":9+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (0, 4, c3),\n+            (1, 0, c3),\n+            (1, 2, c3),\n+            (1, 4, c3),    \n+            (2, 0, c3),\n+            (2, 2, c3),\n+            (2, 3, c3),\n+            (2, 4, c3),\n+            ],\n+            # I\n+            [\n+            {\"left\": 13+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (1, 0, c3),\n+            (2, 0, c3),\n+            (1, 1, c3),\n+            (1, 2, c3),\n+            (1, 3, c3),\n+            (0, 4, c3),\n+            (1, 4, c3),\n+            (2, 4, c3)\n+            ],\n+            # G\n+            [\n+            {\"left\": 17+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (1, 0, c3),\n+            (1, 4, c3),\n+            (2, 0, c3),\n+            (2, 2, c3),\n+            (2, 4, c3),\n+            (3, 0, c3),\n+            (3, 2, c3),\n+            (3, 3, c3),\n+            (3, 4, c3)\n+            ],\n+            # N\n+            [\n+            {\"left\": 22+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (1, 1, c3),\n+            (2, 2, c3),\n+            (3, 3, c3),\n+            (4, 4, c3),\n+            (4, 4, c3),\n+            (4, 0, c3),\n+            (4, 1, c3),\n+            (4, 2, c3),\n+            (4, 3, c3),\n+            (4, 4, c3),\n+            ],\n+            # E\n+            [\n+            {\"left\":28+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (1, 0, c3),\n+            (2, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (1, 2, c3),\n+            (2, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (1, 4, c3),\n+            (2, 4, c3),\n+            ],\n+            # R\n+            [\n+            {\"left\":32+designer_leftmargin, \"top\":designer_top, \"size\": designer_size, \"gap\": designer_gap},\n+            (0, 0, c3),\n+            (1, 0, c3),\n+            (2, 0, c3),\n+            (0, 1, c3),\n+            (0, 2, c3),\n+            (0, 3, c3),\n+            (0, 4, c3),\n+            (0, 4, c3),\n+            (1, 2, c3),\n+            (1, 3, c3),\n+            (2, 1, c3),\n+            (2, 2, c3),\n+            (2, 4, c3),\n+            ],\n+        ]\n+\n+    def get_width():\n+        width = 0\n+        lastpart = parts[-1]\n+        left = lastpart[0][\"left\"]\n+        size = lastpart[0][\"size\"]\n+        gap = lastpart[0][\"gap\"]\n+        for square in lastpart[1::]:\n+            width += square[0]*(size+gap)\n+        return width\n+    \n+    def get_height():\n+        height = 0\n+        lastpart = parts[-1]\n+        top = lastpart[0][\"top\"]\n+        size = lastpart[0][\"size\"]\n+        gap = lastpart[0][\"gap\"]\n+        for square in lastpart[1::]:\n+            height += square[1]*(size+gap)\n+        return height\n+\n+    width = 16 * (size + gap) + get_width()\n+    height = -3 * (size + gap) + get_height()\n+    def recursive_len(item):\n+        if type(item) == list:\n+            return sum(recursive_len(subitem) for subitem in item)\n+        else:\n+            return 1\n+    \n+    canvas = Stack(\n+        width=width,\n+        height=height,\n+        animate_scale=duration,\n+        animate_opacity=duration,\n+    )\n+    for i in range(recursive_len(parts)-len(parts)):\n+        canvas.controls.append(\n+            Container(\n+                animate=duration,\n+                animate_position=duration,\n+                animate_rotation=duration,\n+            )\n+        )\n+    def randomize(e):\n+        random.seed()\n+        for i in range(recursive_len(parts)-len(parts)):\n+            c = canvas.controls[i]\n+            part_size = random.randrange(int(size / 2), int(size * 3))\n+            c.left = random.randrange(0, width)\n+            c.top = random.randrange(0, height)\n+            c.bgcolor = all_colors[random.randrange(0, len(all_colors))]\n+            c.width = part_size\n+            c.height = part_size\n+            c.border_radius = random.randrange(0, int(size / 2))\n+            c.rotate = random.randrange(0, 90) * 2 * pi / 360\n+        canvas.scale = 5\n+        canvas.opacity = 0.3\n+        page.update()\n+\n+    def assemble(e):\n+        i = 0\n+        for container in parts:\n+            data = container[0]\n+            main_left = data[\"left\"]\n+            main_top = data[\"top\"]\n+            main_size = data[\"size\"]\n+            main_gap = data[\"gap\"]\n+            for partnum, (left, top, bgcolor) in enumerate(container[1::]):\n+                c = canvas.controls[i]\n+                c.left = ((left + main_left) * (main_size + main_gap)) \n+                c.top = (main_top + top) * (main_size + main_gap)\n+                c.bgcolor = bgcolor\n+                c.width = main_size\n+                c.height = main_size\n+                c.border_radius = 5\n+                c.rotate = 0\n+                i += 1\n+                canvas.scale = 1\n+                canvas.opacity = 1\n+                page.update()\n+    # go_button = ElevatedButton(\"Go!\", on_click=assemble)\n+    # again_button = ElevatedButton(\"Again!\", on_click=randomize)\n+\n+    randomize(None)\n+    page.horizontal_alignment = \"center\"\n+    page.vertical_alignment = \"center\"\n+    page.spacing = 30\n+    page.add(canvas)\n+    time.sleep(1)\n+    assemble(\"e\")    \n+    \n+])\n"
                }
            ],
            "date": 1696016357251,
            "name": "Commit-0",
            "content": "import flet as ft\n\n\nview=ft.View(route=\"/welcome\")\n"
        }
    ]
}