{
    "sourceFile": "ColorPicker/color_picker.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1700508407261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700508418491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n             value=rgb[0],\n             text_size=12,\n             on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n             on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n-            d\n+            disabled=True,\n         )\n         self.g = ft.TextField(\n             label=\"G\",\n             height=40,\n@@ -107,8 +107,9 @@\n             value=rgb[1],\n             text_size=12,\n             on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n             on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n+            d\n         )\n         self.b = ft.TextField(\n             label=\"B\",\n             height=40,\n"
                },
                {
                    "date": 1700508424113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n             value=rgb[1],\n             text_size=12,\n             on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n             on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n-            disabled=\n+            disabled=True\n         )\n         self.b = ft.TextField(\n             label=\"B\",\n             height=40,\n"
                },
                {
                    "date": 1700508434575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             value=rgb[2],\n             text_size=12,\n             on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n             on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n-            d\n+            disabled=True\n         )\n         self.selected_color_view = ft.Column(\n             spacing=20,\n             controls=[\n"
                }
            ],
            "date": 1700508407261,
            "name": "Commit-0",
            "content": "import colorsys\n\nimport flet as ft\nfrom flet_core.utils import is_asyncio\n\nfrom .hue_slider import HueSlider\nfrom .utils import *\n\nCOLOR_MATRIX_WIDTH = 340\nCIRCLE_SIZE = 20\n\n\nclass ColorPicker(ft.Column):\n    def __init__(self, color=\"#000000\", width=COLOR_MATRIX_WIDTH):\n        super().__init__()\n        self.tight = True\n        self.width = width\n        self.__color = color\n        self.hue_slider = HueSlider(\n            on_change_hue=self.update_color_picker_on_hue_change_async\n            if is_asyncio()\n            else self.update_color_picker_on_hue_change,\n            hue=hex2hsv(self.color)[0],\n        )\n        self.generate_color_map()\n        self.generate_selected_color_view()\n\n    # color\n    @property\n    def color(self):\n        return self.__color\n\n    @color.setter\n    def color(self, value):\n        self.__color = value\n\n    def _before_build_command(self):\n        super()._before_build_command()\n        # called every time on self.update()\n        self.hue_slider.hue = hex2hsv(self.color)[0]\n        self.update_circle_position()\n        self.update_color_map()\n        self.update_selected_color_view_values()\n        print(\"ON UPDATE\")\n\n    def update_circle_position(self):\n        hsv_color = hex2hsv(self.color)\n        self.thumb.left = hsv_color[1] * self.color_map.width  # s * width\n        self.thumb.top = (1 - hsv_color[2]) * self.color_map.height  # (1-v)*height\n\n    def find_color(self, x, y):\n        h = self.hue_slider.hue\n        s = x / self.color_map.width\n        v = (self.color_map.height - y) / self.color_map.height\n        self.color = rgb2hex(colorsys.hsv_to_rgb(h, s, v))\n\n    def generate_selected_color_view(self):\n        rgb = hex2rgb(self.color)\n\n        def on_hex_submit(e):\n            self.color = e.control.value\n            self.update()\n\n        async def on_hex_submit_async(e):\n            self.color = e.control.value\n            await self.update_async()\n\n        def __on_rgb_submit():\n            rgb = (\n                int(self.r.value) / 255,\n                int(self.g.value) / 255,\n                int(self.b.value) / 255,\n            )\n            self.color = rgb2hex(rgb)\n\n        def on_rgb_submit(e):\n            __on_rgb_submit()\n            self.update()\n\n        async def on_rgb_submit_async(e):\n            __on_rgb_submit()\n            await self.update_async()\n\n        self.hex = ft.TextField(\n            label=\"Hex\",\n            text_size=12,\n            value=self.__color,\n            height=40,\n            width=90,\n            on_submit=on_hex_submit_async if is_asyncio() else on_hex_submit,\n            on_blur=on_hex_submit_async if is_asyncio() else on_hex_submit,\n        )\n        self.r = ft.TextField(\n            label=\"R\",\n            height=40,\n            width=55,\n            value=rgb[0],\n            text_size=12,\n            on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n            on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n            d\n        )\n        self.g = ft.TextField(\n            label=\"G\",\n            height=40,\n            width=55,\n            value=rgb[1],\n            text_size=12,\n            on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n            on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n        )\n        self.b = ft.TextField(\n            label=\"B\",\n            height=40,\n            width=55,\n            value=rgb[2],\n            text_size=12,\n            on_submit=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n            on_blur=on_rgb_submit_async if is_asyncio() else on_rgb_submit,\n        )\n        self.selected_color_view = ft.Column(\n            spacing=20,\n            controls=[\n                ft.Row(\n                    alignment=ft.MainAxisAlignment.SPACE_AROUND,\n                    controls=[\n                        ft.Container(\n                            width=30, height=30, border_radius=30, bgcolor=self.__color\n                        ),\n                        self.hue_slider,\n                    ],\n                ),\n                ft.Row(\n                    alignment=ft.MainAxisAlignment.SPACE_AROUND,\n                    controls=[\n                        self.hex,\n                        self.r,\n                        self.g,\n                        self.b,\n                    ],\n                ),\n            ],\n        )\n\n        self.controls.append(self.selected_color_view)\n\n    def update_selected_color_view_values(self):\n        rgb = hex2rgb(self.color)\n        self.selected_color_view.controls[0].controls[\n            0\n        ].bgcolor = self.color  # Colored circle\n        self.hex.value = self.__color  # Hex\n        self.r.value = rgb[0]  # R\n        self.g.value = rgb[1]  # G\n        self.b.value = rgb[2]  # B\n        self.thumb.bgcolor = self.color  # Color matrix circle\n\n    def generate_color_map(self):\n        def __move_circle(x, y):\n            self.thumb.top = max(\n                0,\n                min(\n                    y - CIRCLE_SIZE / 2,\n                    self.color_map.height,\n                ),\n            )\n            self.thumb.left = max(\n                0,\n                min(\n                    x - CIRCLE_SIZE / 2,\n                    self.color_map.width,\n                ),\n            )\n            self.find_color(x=self.thumb.left, y=self.thumb.top)\n            self.update_selected_color_view_values()\n\n        def on_pan_update(e: ft.DragStartEvent):\n            __move_circle(x=e.local_x, y=e.local_y)\n            self.selected_color_view.update()\n            self.thumb.update()\n\n        async def on_pan_update_async(e: ft.DragStartEvent):\n            __move_circle(x=e.local_x, y=e.local_y)\n            await self.selected_color_view.update_async()\n            await self.thumb.update_async()\n\n        self.color_map_container = ft.GestureDetector(\n            content=ft.Stack(\n                width=self.width,\n                height=int(self.width * 3 / 5),\n            ),\n            on_pan_start=on_pan_update_async if is_asyncio() else on_pan_update,\n            on_pan_update=on_pan_update_async if is_asyncio() else on_pan_update,\n        )\n\n        saturation_container = ft.Container(\n            gradient=ft.LinearGradient(\n                begin=ft.alignment.center_left,\n                end=ft.alignment.center_right,\n                colors=[ft.colors.WHITE, ft.colors.RED],\n            ),\n            width=self.color_map_container.content.width - CIRCLE_SIZE,\n            height=self.color_map_container.content.height - CIRCLE_SIZE,\n            border_radius=5,\n        )\n\n        self.color_map = ft.ShaderMask(\n            top=CIRCLE_SIZE / 2,\n            left=CIRCLE_SIZE / 2,\n            content=saturation_container,\n            blend_mode=ft.BlendMode.MULTIPLY,\n            shader=ft.LinearGradient(\n                begin=ft.alignment.top_center,\n                end=ft.alignment.bottom_center,\n                colors=[ft.colors.WHITE, ft.colors.BLACK],\n            ),\n            border_radius=5,\n            width=saturation_container.width,\n            height=saturation_container.height,\n        )\n\n        self.thumb = ft.Container(\n            width=CIRCLE_SIZE,\n            height=CIRCLE_SIZE,\n            border_radius=CIRCLE_SIZE,\n            border=ft.border.all(width=2, color=\"white\"),\n        )\n\n        self.color_map_container.content.controls.append(self.color_map)\n        self.color_map_container.content.controls.append(self.thumb)\n        self.controls.append(self.color_map_container)\n\n    def update_color_map(self):\n        h = self.hue_slider.hue\n        s = hex2hsv(self.color)[1]\n        v = hex2hsv(self.color)[2]\n        container_gradient_colors = [\n            rgb2hex(colorsys.hsv_to_rgb(h, 0, 1)),\n            rgb2hex(colorsys.hsv_to_rgb(h, 1, 1)),\n        ]\n\n        self.color_map.content.gradient.colors = container_gradient_colors\n\n        self.color = rgb2hex(colorsys.hsv_to_rgb(h, s, v))\n\n    def update_color_picker_on_hue_change(self):\n        self.update_color_map()\n        self.update_selected_color_view_values()\n        self.selected_color_view.update()\n        self.color_map_container.update()\n\n    async def update_color_picker_on_hue_change_async(self):\n        self.update_color_map()\n        self.update_selected_color_view_values()\n        await self.selected_color_view.update_async()\n        await self.color_map_container.update_async()\n"
        }
    ]
}